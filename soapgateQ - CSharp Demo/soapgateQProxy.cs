//------------------------------------------------------------------------------
// <auto-generated>
//     Dieser Code wurde von einem Tool generiert.
//     Laufzeitversion:4.0.30319.34014
//
//     Änderungen an dieser Datei können falsches Verhalten verursachen und gehen verloren, wenn
//     der Code erneut generiert wird.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// Dieser Quellcode wurde automatisch generiert von wsdl, Version=4.0.30319.18020.
// 
namespace soapgateQ
{
    using System;
    using System.Web.Services;
    using System.Diagnostics;
    using System.Web.Services.Protocols;
    using System.Xml.Serialization;
    using System.ComponentModel;


    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.18020")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name = "DominoSoapBinding", Namespace = "urn:DefaultNamespace")]
    public partial class DominoUtilityWebServices : System.Web.Services.Protocols.SoapHttpClientProtocol
    {

        private System.Threading.SendOrPostCallback DBCOLUMNOperationCompleted;

        private System.Threading.SendOrPostCallback DBCOLUMNXOperationCompleted;

        private System.Threading.SendOrPostCallback DBROWXOperationCompleted;

        private System.Threading.SendOrPostCallback DBLOOKUPOperationCompleted;

        private System.Threading.SendOrPostCallback DBLOOKUPXOperationCompleted;

        private System.Threading.SendOrPostCallback DBGETFORMFIELDSOperationCompleted;

        private System.Threading.SendOrPostCallback DBGETFIELDTYPESOperationCompleted;

        private System.Threading.SendOrPostCallback DBREADDOCFIELDSOperationCompleted;

        private System.Threading.SendOrPostCallback DBREADPROFILEFIELDSOperationCompleted;

        private System.Threading.SendOrPostCallback DBSAVEDOCFIELDSOperationCompleted;

        private System.Threading.SendOrPostCallback DBSAVEPROFILEFIELDSOperationCompleted;

        private System.Threading.SendOrPostCallback DBRENDERDOCOperationCompleted;

        private System.Threading.SendOrPostCallback DBDELETEDOCOperationCompleted;

        private System.Threading.SendOrPostCallback DBGETMAILINFOOperationCompleted;

        private System.Threading.SendOrPostCallback DBLOOKUPNAMESOperationCompleted;

        private System.Threading.SendOrPostCallback DBLOOKUPALLNAMESOperationCompleted;

        private System.Threading.SendOrPostCallback DBSENDDOCUMENTOperationCompleted;

        private System.Threading.SendOrPostCallback DBVIEWSOperationCompleted;

        private System.Threading.SendOrPostCallback DBOUTLINEVIEWSOperationCompleted;

        private System.Threading.SendOrPostCallback DBSEARCHOperationCompleted;

        private System.Threading.SendOrPostCallback DBFTSEARCHOperationCompleted;

        private System.Threading.SendOrPostCallback DBVIEWFTSEARCHOperationCompleted;

        private System.Threading.SendOrPostCallback DBCALLAGENTOperationCompleted;

        private System.Threading.SendOrPostCallback DBSESSIONKEEPALIVEOperationCompleted;

        private System.Threading.SendOrPostCallback DBUSERROLESOperationCompleted;

        private System.Threading.SendOrPostCallback DBACLOperationCompleted;

        private System.Threading.SendOrPostCallback DBEFFECTIVERIGHTSOperationCompleted;

        private System.Threading.SendOrPostCallback DBVIEW2XMLOperationCompleted;

        private System.Threading.SendOrPostCallback DBVIEWCOLUMNSOperationCompleted;

        private System.Threading.SendOrPostCallback DBPUTINFOLDEROperationCompleted;

        private System.Threading.SendOrPostCallback DBREMOVEFROMFOLDEROperationCompleted;

        private System.Threading.SendOrPostCallback DBCLEARFOLDEROperationCompleted;

        private System.Threading.SendOrPostCallback DBUPLOADFILEOperationCompleted;

        private System.Threading.SendOrPostCallback DBDOWNLOADFILEOperationCompleted;

        private System.Threading.SendOrPostCallback DBDOCATTACHMENTLISTOperationCompleted;

        /// <remarks/>
        public DominoUtilityWebServices(string endPoint)
        {
            this.Url = endPoint;
        }

        /// <remarks/>
        public event DBCOLUMNCompletedEventHandler DBCOLUMNCompleted;

        /// <remarks/>
        public event DBCOLUMNXCompletedEventHandler DBCOLUMNXCompleted;

        /// <remarks/>
        public event DBROWXCompletedEventHandler DBROWXCompleted;

        /// <remarks/>
        public event DBLOOKUPCompletedEventHandler DBLOOKUPCompleted;

        /// <remarks/>
        public event DBLOOKUPXCompletedEventHandler DBLOOKUPXCompleted;

        /// <remarks/>
        public event DBGETFORMFIELDSCompletedEventHandler DBGETFORMFIELDSCompleted;

        /// <remarks/>
        public event DBGETFIELDTYPESCompletedEventHandler DBGETFIELDTYPESCompleted;

        /// <remarks/>
        public event DBREADDOCFIELDSCompletedEventHandler DBREADDOCFIELDSCompleted;

        /// <remarks/>
        public event DBREADPROFILEFIELDSCompletedEventHandler DBREADPROFILEFIELDSCompleted;

        /// <remarks/>
        public event DBSAVEDOCFIELDSCompletedEventHandler DBSAVEDOCFIELDSCompleted;

        /// <remarks/>
        public event DBSAVEPROFILEFIELDSCompletedEventHandler DBSAVEPROFILEFIELDSCompleted;

        /// <remarks/>
        public event DBRENDERDOCCompletedEventHandler DBRENDERDOCCompleted;

        /// <remarks/>
        public event DBDELETEDOCCompletedEventHandler DBDELETEDOCCompleted;

        /// <remarks/>
        public event DBGETMAILINFOCompletedEventHandler DBGETMAILINFOCompleted;

        /// <remarks/>
        public event DBLOOKUPNAMESCompletedEventHandler DBLOOKUPNAMESCompleted;

        /// <remarks/>
        public event DBLOOKUPALLNAMESCompletedEventHandler DBLOOKUPALLNAMESCompleted;

        /// <remarks/>
        public event DBSENDDOCUMENTCompletedEventHandler DBSENDDOCUMENTCompleted;

        /// <remarks/>
        public event DBVIEWSCompletedEventHandler DBVIEWSCompleted;

        /// <remarks/>
        public event DBOUTLINEVIEWSCompletedEventHandler DBOUTLINEVIEWSCompleted;

        /// <remarks/>
        public event DBSEARCHCompletedEventHandler DBSEARCHCompleted;

        /// <remarks/>
        public event DBFTSEARCHCompletedEventHandler DBFTSEARCHCompleted;

        /// <remarks/>
        public event DBVIEWFTSEARCHCompletedEventHandler DBVIEWFTSEARCHCompleted;

        /// <remarks/>
        public event DBCALLAGENTCompletedEventHandler DBCALLAGENTCompleted;

        /// <remarks/>
        public event DBSESSIONKEEPALIVECompletedEventHandler DBSESSIONKEEPALIVECompleted;

        /// <remarks/>
        public event DBUSERROLESCompletedEventHandler DBUSERROLESCompleted;

        /// <remarks/>
        public event DBACLCompletedEventHandler DBACLCompleted;

        /// <remarks/>
        public event DBEFFECTIVERIGHTSCompletedEventHandler DBEFFECTIVERIGHTSCompleted;

        /// <remarks/>
        public event DBVIEW2XMLCompletedEventHandler DBVIEW2XMLCompleted;

        /// <remarks/>
        public event DBVIEWCOLUMNSCompletedEventHandler DBVIEWCOLUMNSCompleted;

        /// <remarks/>
        public event DBPUTINFOLDERCompletedEventHandler DBPUTINFOLDERCompleted;

        /// <remarks/>
        public event DBREMOVEFROMFOLDERCompletedEventHandler DBREMOVEFROMFOLDERCompleted;

        /// <remarks/>
        public event DBCLEARFOLDERCompletedEventHandler DBCLEARFOLDERCompleted;

        /// <remarks/>
        public event DBUPLOADFILECompletedEventHandler DBUPLOADFILECompleted;

        /// <remarks/>
        public event DBDOWNLOADFILECompletedEventHandler DBDOWNLOADFILECompleted;

        /// <remarks/>
        public event DBDOCATTACHMENTLISTCompletedEventHandler DBDOCATTACHMENTLISTCompleted;

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("DBCOLUMN", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Bare)]
        [return: System.Xml.Serialization.XmlArrayAttribute("DBCOLUMNReturn", Namespace = "urn:DefaultNamespace")]
        [return: System.Xml.Serialization.XmlArrayItemAttribute("item", Form = System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable = false)]
        public string[] DBCOLUMN([System.Xml.Serialization.XmlElementAttribute(Namespace = "urn:DefaultNamespace")] bool CACHE, [System.Xml.Serialization.XmlElementAttribute(Namespace = "urn:DefaultNamespace")] string SRVNAME, [System.Xml.Serialization.XmlElementAttribute(Namespace = "urn:DefaultNamespace")] string DBNAME, [System.Xml.Serialization.XmlElementAttribute(Namespace = "urn:DefaultNamespace")] string VIEWNAME, [System.Xml.Serialization.XmlElementAttribute(Namespace = "urn:DefaultNamespace")] short COLNUMBER, [System.Xml.Serialization.XmlElementAttribute(Namespace = "urn:DefaultNamespace")] string MVALSEP)
        {
            object[] results = this.Invoke("DBCOLUMN", new object[] {
                        CACHE,
                        SRVNAME,
                        DBNAME,
                        VIEWNAME,
                        COLNUMBER,
                        MVALSEP});
            return ((string[])(results[0]));
        }

        /// <remarks/>
        public System.IAsyncResult BeginDBCOLUMN(bool CACHE, string SRVNAME, string DBNAME, string VIEWNAME, short COLNUMBER, string MVALSEP, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("DBCOLUMN", new object[] {
                        CACHE,
                        SRVNAME,
                        DBNAME,
                        VIEWNAME,
                        COLNUMBER,
                        MVALSEP}, callback, asyncState);
        }

        /// <remarks/>
        public string[] EndDBCOLUMN(System.IAsyncResult asyncResult)
        {
            object[] results = this.EndInvoke(asyncResult);
            return ((string[])(results[0]));
        }

        /// <remarks/>
        public void DBCOLUMNAsync(bool CACHE, string SRVNAME, string DBNAME, string VIEWNAME, short COLNUMBER, string MVALSEP)
        {
            this.DBCOLUMNAsync(CACHE, SRVNAME, DBNAME, VIEWNAME, COLNUMBER, MVALSEP, null);
        }

        /// <remarks/>
        public void DBCOLUMNAsync(bool CACHE, string SRVNAME, string DBNAME, string VIEWNAME, short COLNUMBER, string MVALSEP, object userState)
        {
            if((this.DBCOLUMNOperationCompleted == null))
            {
                this.DBCOLUMNOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDBCOLUMNOperationCompleted);
            }
            this.InvokeAsync("DBCOLUMN", new object[] {
                        CACHE,
                        SRVNAME,
                        DBNAME,
                        VIEWNAME,
                        COLNUMBER,
                        MVALSEP}, this.DBCOLUMNOperationCompleted, userState);
        }

        private void OnDBCOLUMNOperationCompleted(object arg)
        {
            if((this.DBCOLUMNCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DBCOLUMNCompleted(this, new DBCOLUMNCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("DBCOLUMNX", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Bare)]
        [return: System.Xml.Serialization.XmlArrayAttribute("DBCOLUMNXReturn", Namespace = "urn:DefaultNamespace")]
        [return: System.Xml.Serialization.XmlArrayItemAttribute("item", Form = System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable = false)]
        public string[] DBCOLUMNX([System.Xml.Serialization.XmlElementAttribute(Namespace = "urn:DefaultNamespace")] string SRVNAME, [System.Xml.Serialization.XmlElementAttribute(Namespace = "urn:DefaultNamespace")] string DBNAME, [System.Xml.Serialization.XmlElementAttribute(Namespace = "urn:DefaultNamespace")] string VIEWNAME, [System.Xml.Serialization.XmlArrayAttribute(Namespace = "urn:DefaultNamespace")] [System.Xml.Serialization.XmlArrayItemAttribute("item", Form = System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable = false)] ref string[] COLFIELDS, [System.Xml.Serialization.XmlElementAttribute(Namespace = "urn:DefaultNamespace")] string MVALSEP, [System.Xml.Serialization.XmlElementAttribute(Namespace = "urn:DefaultNamespace")] bool RETUNID, [System.Xml.Serialization.XmlElementAttribute(Namespace = "urn:DefaultNamespace")] bool ROWFORMAT, [System.Xml.Serialization.XmlElementAttribute(Namespace = "urn:DefaultNamespace")] string STARTPOS, [System.Xml.Serialization.XmlElementAttribute(Namespace = "urn:DefaultNamespace")] short ROWS)
        {
            object[] results = this.Invoke("DBCOLUMNX", new object[] {
                        SRVNAME,
                        DBNAME,
                        VIEWNAME,
                        COLFIELDS,
                        MVALSEP,
                        RETUNID,
                        ROWFORMAT,
                        STARTPOS,
                        ROWS});
            COLFIELDS = ((string[])(results[1]));
            return ((string[])(results[0]));
        }

        /// <remarks/>
        public System.IAsyncResult BeginDBCOLUMNX(string SRVNAME, string DBNAME, string VIEWNAME, string[] COLFIELDS, string MVALSEP, bool RETUNID, bool ROWFORMAT, string STARTPOS, short ROWS, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("DBCOLUMNX", new object[] {
                        SRVNAME,
                        DBNAME,
                        VIEWNAME,
                        COLFIELDS,
                        MVALSEP,
                        RETUNID,
                        ROWFORMAT,
                        STARTPOS,
                        ROWS}, callback, asyncState);
        }

        /// <remarks/>
        public string[] EndDBCOLUMNX(System.IAsyncResult asyncResult, out string[] COLFIELDS)
        {
            object[] results = this.EndInvoke(asyncResult);
            COLFIELDS = ((string[])(results[1]));
            return ((string[])(results[0]));
        }

        /// <remarks/>
        public void DBCOLUMNXAsync(string SRVNAME, string DBNAME, string VIEWNAME, string[] COLFIELDS, string MVALSEP, bool RETUNID, bool ROWFORMAT, string STARTPOS, short ROWS)
        {
            this.DBCOLUMNXAsync(SRVNAME, DBNAME, VIEWNAME, COLFIELDS, MVALSEP, RETUNID, ROWFORMAT, STARTPOS, ROWS, null);
        }

        /// <remarks/>
        public void DBCOLUMNXAsync(string SRVNAME, string DBNAME, string VIEWNAME, string[] COLFIELDS, string MVALSEP, bool RETUNID, bool ROWFORMAT, string STARTPOS, short ROWS, object userState)
        {
            if((this.DBCOLUMNXOperationCompleted == null))
            {
                this.DBCOLUMNXOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDBCOLUMNXOperationCompleted);
            }
            this.InvokeAsync("DBCOLUMNX", new object[] {
                        SRVNAME,
                        DBNAME,
                        VIEWNAME,
                        COLFIELDS,
                        MVALSEP,
                        RETUNID,
                        ROWFORMAT,
                        STARTPOS,
                        ROWS}, this.DBCOLUMNXOperationCompleted, userState);
        }

        private void OnDBCOLUMNXOperationCompleted(object arg)
        {
            if((this.DBCOLUMNXCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DBCOLUMNXCompleted(this, new DBCOLUMNXCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("DBROWX", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Bare)]
        [return: System.Xml.Serialization.XmlArrayAttribute("DBROWXReturn", Namespace = "urn:DefaultNamespace")]
        [return: System.Xml.Serialization.XmlArrayItemAttribute("item", Form = System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable = false)]
        public string[] DBROWX([System.Xml.Serialization.XmlElementAttribute(Namespace = "urn:DefaultNamespace")] string SRVNAME, [System.Xml.Serialization.XmlElementAttribute(Namespace = "urn:DefaultNamespace")] string DBNAME, [System.Xml.Serialization.XmlElementAttribute(Namespace = "urn:DefaultNamespace")] string VIEWNAME, [System.Xml.Serialization.XmlArrayAttribute(Namespace = "urn:DefaultNamespace")] [System.Xml.Serialization.XmlArrayItemAttribute("item", Form = System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable = false)] ref string[] COLFIELDS, [System.Xml.Serialization.XmlElementAttribute(Namespace = "urn:DefaultNamespace")] string MVALSEP, [System.Xml.Serialization.XmlElementAttribute(Namespace = "urn:DefaultNamespace")] bool RETUNID, [System.Xml.Serialization.XmlElementAttribute(Namespace = "urn:DefaultNamespace")] string DOCUNID)
        {
            object[] results = this.Invoke("DBROWX", new object[] {
                        SRVNAME,
                        DBNAME,
                        VIEWNAME,
                        COLFIELDS,
                        MVALSEP,
                        RETUNID,
                        DOCUNID});
            COLFIELDS = ((string[])(results[1]));
            return ((string[])(results[0]));
        }

        /// <remarks/>
        public System.IAsyncResult BeginDBROWX(string SRVNAME, string DBNAME, string VIEWNAME, string[] COLFIELDS, string MVALSEP, bool RETUNID, string DOCUNID, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("DBROWX", new object[] {
                        SRVNAME,
                        DBNAME,
                        VIEWNAME,
                        COLFIELDS,
                        MVALSEP,
                        RETUNID,
                        DOCUNID}, callback, asyncState);
        }

        /// <remarks/>
        public string[] EndDBROWX(System.IAsyncResult asyncResult, out string[] COLFIELDS)
        {
            object[] results = this.EndInvoke(asyncResult);
            COLFIELDS = ((string[])(results[1]));
            return ((string[])(results[0]));
        }

        /// <remarks/>
        public void DBROWXAsync(string SRVNAME, string DBNAME, string VIEWNAME, string[] COLFIELDS, string MVALSEP, bool RETUNID, string DOCUNID)
        {
            this.DBROWXAsync(SRVNAME, DBNAME, VIEWNAME, COLFIELDS, MVALSEP, RETUNID, DOCUNID, null);
        }

        /// <remarks/>
        public void DBROWXAsync(string SRVNAME, string DBNAME, string VIEWNAME, string[] COLFIELDS, string MVALSEP, bool RETUNID, string DOCUNID, object userState)
        {
            if((this.DBROWXOperationCompleted == null))
            {
                this.DBROWXOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDBROWXOperationCompleted);
            }
            this.InvokeAsync("DBROWX", new object[] {
                        SRVNAME,
                        DBNAME,
                        VIEWNAME,
                        COLFIELDS,
                        MVALSEP,
                        RETUNID,
                        DOCUNID}, this.DBROWXOperationCompleted, userState);
        }

        private void OnDBROWXOperationCompleted(object arg)
        {
            if((this.DBROWXCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DBROWXCompleted(this, new DBROWXCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("DBLOOKUP", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Bare)]
        [return: System.Xml.Serialization.XmlArrayAttribute("DBLOOKUPReturn", Namespace = "urn:DefaultNamespace")]
        [return: System.Xml.Serialization.XmlArrayItemAttribute("item", Form = System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable = false)]
        public string[] DBLOOKUP([System.Xml.Serialization.XmlElementAttribute(Namespace = "urn:DefaultNamespace")] bool CACHE, [System.Xml.Serialization.XmlElementAttribute(Namespace = "urn:DefaultNamespace")] string SRVNAME, [System.Xml.Serialization.XmlElementAttribute(Namespace = "urn:DefaultNamespace")] string DBNAME, [System.Xml.Serialization.XmlElementAttribute(Namespace = "urn:DefaultNamespace")] string VIEWNAME, [System.Xml.Serialization.XmlArrayAttribute(Namespace = "urn:DefaultNamespace")] [System.Xml.Serialization.XmlArrayItemAttribute("item", Form = System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable = false)] ref string[] KEYS, [System.Xml.Serialization.XmlElementAttribute(Namespace = "urn:DefaultNamespace")] short COLNUMBER, [System.Xml.Serialization.XmlElementAttribute(Namespace = "urn:DefaultNamespace")] string FIELDNAME, [System.Xml.Serialization.XmlElementAttribute(Namespace = "urn:DefaultNamespace")] string MVALSEP, [System.Xml.Serialization.XmlElementAttribute(Namespace = "urn:DefaultNamespace")] bool FAILSILENT, [System.Xml.Serialization.XmlElementAttribute(Namespace = "urn:DefaultNamespace")] bool PARTIALMATCH, [System.Xml.Serialization.XmlElementAttribute(Namespace = "urn:DefaultNamespace")] bool RETURNUNID)
        {
            object[] results = this.Invoke("DBLOOKUP", new object[] {
                        CACHE,
                        SRVNAME,
                        DBNAME,
                        VIEWNAME,
                        KEYS,
                        COLNUMBER,
                        FIELDNAME,
                        MVALSEP,
                        FAILSILENT,
                        PARTIALMATCH,
                        RETURNUNID});
            KEYS = ((string[])(results[1]));
            return ((string[])(results[0]));
        }

        /// <remarks/>
        public System.IAsyncResult BeginDBLOOKUP(bool CACHE, string SRVNAME, string DBNAME, string VIEWNAME, string[] KEYS, short COLNUMBER, string FIELDNAME, string MVALSEP, bool FAILSILENT, bool PARTIALMATCH, bool RETURNUNID, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("DBLOOKUP", new object[] {
                        CACHE,
                        SRVNAME,
                        DBNAME,
                        VIEWNAME,
                        KEYS,
                        COLNUMBER,
                        FIELDNAME,
                        MVALSEP,
                        FAILSILENT,
                        PARTIALMATCH,
                        RETURNUNID}, callback, asyncState);
        }

        /// <remarks/>
        public string[] EndDBLOOKUP(System.IAsyncResult asyncResult, out string[] KEYS)
        {
            object[] results = this.EndInvoke(asyncResult);
            KEYS = ((string[])(results[1]));
            return ((string[])(results[0]));
        }

        /// <remarks/>
        public void DBLOOKUPAsync(bool CACHE, string SRVNAME, string DBNAME, string VIEWNAME, string[] KEYS, short COLNUMBER, string FIELDNAME, string MVALSEP, bool FAILSILENT, bool PARTIALMATCH, bool RETURNUNID)
        {
            this.DBLOOKUPAsync(CACHE, SRVNAME, DBNAME, VIEWNAME, KEYS, COLNUMBER, FIELDNAME, MVALSEP, FAILSILENT, PARTIALMATCH, RETURNUNID, null);
        }

        /// <remarks/>
        public void DBLOOKUPAsync(bool CACHE, string SRVNAME, string DBNAME, string VIEWNAME, string[] KEYS, short COLNUMBER, string FIELDNAME, string MVALSEP, bool FAILSILENT, bool PARTIALMATCH, bool RETURNUNID, object userState)
        {
            if((this.DBLOOKUPOperationCompleted == null))
            {
                this.DBLOOKUPOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDBLOOKUPOperationCompleted);
            }
            this.InvokeAsync("DBLOOKUP", new object[] {
                        CACHE,
                        SRVNAME,
                        DBNAME,
                        VIEWNAME,
                        KEYS,
                        COLNUMBER,
                        FIELDNAME,
                        MVALSEP,
                        FAILSILENT,
                        PARTIALMATCH,
                        RETURNUNID}, this.DBLOOKUPOperationCompleted, userState);
        }

        private void OnDBLOOKUPOperationCompleted(object arg)
        {
            if((this.DBLOOKUPCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DBLOOKUPCompleted(this, new DBLOOKUPCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("DBLOOKUPX", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Bare)]
        [return: System.Xml.Serialization.XmlArrayAttribute("DBLOOKUPXReturn", Namespace = "urn:DefaultNamespace")]
        [return: System.Xml.Serialization.XmlArrayItemAttribute("item", Form = System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable = false)]
        public string[] DBLOOKUPX([System.Xml.Serialization.XmlElementAttribute(Namespace = "urn:DefaultNamespace")] bool CACHE, [System.Xml.Serialization.XmlElementAttribute(Namespace = "urn:DefaultNamespace")] string SRVNAME, [System.Xml.Serialization.XmlElementAttribute(Namespace = "urn:DefaultNamespace")] string DBNAME, [System.Xml.Serialization.XmlElementAttribute(Namespace = "urn:DefaultNamespace")] string VIEWNAME, [System.Xml.Serialization.XmlArrayAttribute(Namespace = "urn:DefaultNamespace")] [System.Xml.Serialization.XmlArrayItemAttribute("item", Form = System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable = false)] ref string[] KEYS, [System.Xml.Serialization.XmlElementAttribute(Namespace = "urn:DefaultNamespace")] string MODSINCE, [System.Xml.Serialization.XmlArrayAttribute(Namespace = "urn:DefaultNamespace")] [System.Xml.Serialization.XmlArrayItemAttribute("item", Form = System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable = false)] ref string[] COLFIELDS, [System.Xml.Serialization.XmlElementAttribute(Namespace = "urn:DefaultNamespace")] string MVALSEP, [System.Xml.Serialization.XmlElementAttribute(Namespace = "urn:DefaultNamespace")] bool FAILSILENT, [System.Xml.Serialization.XmlElementAttribute(Namespace = "urn:DefaultNamespace")] bool PARTIALMATCH, [System.Xml.Serialization.XmlElementAttribute(Namespace = "urn:DefaultNamespace")] bool RETUNID, [System.Xml.Serialization.XmlElementAttribute(Namespace = "urn:DefaultNamespace")] bool ROWFORMAT, [System.Xml.Serialization.XmlElementAttribute(Namespace = "urn:DefaultNamespace")] string STARTPOS, [System.Xml.Serialization.XmlElementAttribute(Namespace = "urn:DefaultNamespace")] short ROWS)
        {
            object[] results = this.Invoke("DBLOOKUPX", new object[] {
                        CACHE,
                        SRVNAME,
                        DBNAME,
                        VIEWNAME,
                        KEYS,
                        MODSINCE,
                        COLFIELDS,
                        MVALSEP,
                        FAILSILENT,
                        PARTIALMATCH,
                        RETUNID,
                        ROWFORMAT,
                        STARTPOS,
                        ROWS});
            KEYS = ((string[])(results[1]));
            COLFIELDS = ((string[])(results[2]));
            return ((string[])(results[0]));
        }

        /// <remarks/>
        public System.IAsyncResult BeginDBLOOKUPX(
                    bool CACHE,
                    string SRVNAME,
                    string DBNAME,
                    string VIEWNAME,
                    string[] KEYS,
                    string MODSINCE,
                    string[] COLFIELDS,
                    string MVALSEP,
                    bool FAILSILENT,
                    bool PARTIALMATCH,
                    bool RETUNID,
                    bool ROWFORMAT,
                    string STARTPOS,
                    short ROWS,
                    System.AsyncCallback callback,
                    object asyncState)
        {
            return this.BeginInvoke("DBLOOKUPX", new object[] {
                        CACHE,
                        SRVNAME,
                        DBNAME,
                        VIEWNAME,
                        KEYS,
                        MODSINCE,
                        COLFIELDS,
                        MVALSEP,
                        FAILSILENT,
                        PARTIALMATCH,
                        RETUNID,
                        ROWFORMAT,
                        STARTPOS,
                        ROWS}, callback, asyncState);
        }

        /// <remarks/>
        public string[] EndDBLOOKUPX(System.IAsyncResult asyncResult, out string[] KEYS, out string[] COLFIELDS)
        {
            object[] results = this.EndInvoke(asyncResult);
            KEYS = ((string[])(results[1]));
            COLFIELDS = ((string[])(results[2]));
            return ((string[])(results[0]));
        }

        /// <remarks/>
        public void DBLOOKUPXAsync(bool CACHE, string SRVNAME, string DBNAME, string VIEWNAME, string[] KEYS, string MODSINCE, string[] COLFIELDS, string MVALSEP, bool FAILSILENT, bool PARTIALMATCH, bool RETUNID, bool ROWFORMAT, string STARTPOS, short ROWS)
        {
            this.DBLOOKUPXAsync(CACHE, SRVNAME, DBNAME, VIEWNAME, KEYS, MODSINCE, COLFIELDS, MVALSEP, FAILSILENT, PARTIALMATCH, RETUNID, ROWFORMAT, STARTPOS, ROWS, null);
        }

        /// <remarks/>
        public void DBLOOKUPXAsync(bool CACHE, string SRVNAME, string DBNAME, string VIEWNAME, string[] KEYS, string MODSINCE, string[] COLFIELDS, string MVALSEP, bool FAILSILENT, bool PARTIALMATCH, bool RETUNID, bool ROWFORMAT, string STARTPOS, short ROWS, object userState)
        {
            if((this.DBLOOKUPXOperationCompleted == null))
            {
                this.DBLOOKUPXOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDBLOOKUPXOperationCompleted);
            }
            this.InvokeAsync("DBLOOKUPX", new object[] {
                        CACHE,
                        SRVNAME,
                        DBNAME,
                        VIEWNAME,
                        KEYS,
                        MODSINCE,
                        COLFIELDS,
                        MVALSEP,
                        FAILSILENT,
                        PARTIALMATCH,
                        RETUNID,
                        ROWFORMAT,
                        STARTPOS,
                        ROWS}, this.DBLOOKUPXOperationCompleted, userState);
        }

        private void OnDBLOOKUPXOperationCompleted(object arg)
        {
            if((this.DBLOOKUPXCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DBLOOKUPXCompleted(this, new DBLOOKUPXCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("DBGETFORMFIELDS", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Bare)]
        [return: System.Xml.Serialization.XmlArrayAttribute("DBGETFORMFIELDSReturn", Namespace = "urn:DefaultNamespace")]
        [return: System.Xml.Serialization.XmlArrayItemAttribute("item", Form = System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable = false)]
        public string[] DBGETFORMFIELDS([System.Xml.Serialization.XmlElementAttribute(Namespace = "urn:DefaultNamespace")] string SRVNAME, [System.Xml.Serialization.XmlElementAttribute(Namespace = "urn:DefaultNamespace")] string DBNAME, [System.Xml.Serialization.XmlElementAttribute(Namespace = "urn:DefaultNamespace")] string FORM, [System.Xml.Serialization.XmlElementAttribute(Namespace = "urn:DefaultNamespace")] bool INCLUDELSF)
        {
            object[] results = this.Invoke("DBGETFORMFIELDS", new object[] {
                        SRVNAME,
                        DBNAME,
                        FORM,
                        INCLUDELSF});
            return ((string[])(results[0]));
        }

        /// <remarks/>
        public System.IAsyncResult BeginDBGETFORMFIELDS(string SRVNAME, string DBNAME, string FORM, bool INCLUDELSF, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("DBGETFORMFIELDS", new object[] {
                        SRVNAME,
                        DBNAME,
                        FORM,
                        INCLUDELSF}, callback, asyncState);
        }

        /// <remarks/>
        public string[] EndDBGETFORMFIELDS(System.IAsyncResult asyncResult)
        {
            object[] results = this.EndInvoke(asyncResult);
            return ((string[])(results[0]));
        }

        /// <remarks/>
        public void DBGETFORMFIELDSAsync(string SRVNAME, string DBNAME, string FORM, bool INCLUDELSF)
        {
            this.DBGETFORMFIELDSAsync(SRVNAME, DBNAME, FORM, INCLUDELSF, null);
        }

        /// <remarks/>
        public void DBGETFORMFIELDSAsync(string SRVNAME, string DBNAME, string FORM, bool INCLUDELSF, object userState)
        {
            if((this.DBGETFORMFIELDSOperationCompleted == null))
            {
                this.DBGETFORMFIELDSOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDBGETFORMFIELDSOperationCompleted);
            }
            this.InvokeAsync("DBGETFORMFIELDS", new object[] {
                        SRVNAME,
                        DBNAME,
                        FORM,
                        INCLUDELSF}, this.DBGETFORMFIELDSOperationCompleted, userState);
        }

        private void OnDBGETFORMFIELDSOperationCompleted(object arg)
        {
            if((this.DBGETFORMFIELDSCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DBGETFORMFIELDSCompleted(this, new DBGETFORMFIELDSCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("DBGETFIELDTYPES", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Bare)]
        [return: System.Xml.Serialization.XmlArrayAttribute("DBGETFIELDTYPESReturn", Namespace = "urn:DefaultNamespace")]
        [return: System.Xml.Serialization.XmlArrayItemAttribute("item", Form = System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable = false)]
        public string[] DBGETFIELDTYPES([System.Xml.Serialization.XmlElementAttribute(Namespace = "urn:DefaultNamespace")] string SRVNAME, [System.Xml.Serialization.XmlElementAttribute(Namespace = "urn:DefaultNamespace")] string DBNAME, [System.Xml.Serialization.XmlElementAttribute(Namespace = "urn:DefaultNamespace")] string FORM, [System.Xml.Serialization.XmlArrayAttribute(Namespace = "urn:DefaultNamespace")] [System.Xml.Serialization.XmlArrayItemAttribute("item", Form = System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable = false)] ref string[] FIELDS, [System.Xml.Serialization.XmlElementAttribute(Namespace = "urn:DefaultNamespace")] string MVALSEP)
        {
            object[] results = this.Invoke("DBGETFIELDTYPES", new object[] {
                        SRVNAME,
                        DBNAME,
                        FORM,
                        FIELDS,
                        MVALSEP});
            FIELDS = ((string[])(results[1]));
            return ((string[])(results[0]));
        }

        /// <remarks/>
        public System.IAsyncResult BeginDBGETFIELDTYPES(string SRVNAME, string DBNAME, string FORM, string[] FIELDS, string MVALSEP, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("DBGETFIELDTYPES", new object[] {
                        SRVNAME,
                        DBNAME,
                        FORM,
                        FIELDS,
                        MVALSEP}, callback, asyncState);
        }

        /// <remarks/>
        public string[] EndDBGETFIELDTYPES(System.IAsyncResult asyncResult, out string[] FIELDS)
        {
            object[] results = this.EndInvoke(asyncResult);
            FIELDS = ((string[])(results[1]));
            return ((string[])(results[0]));
        }

        /// <remarks/>
        public void DBGETFIELDTYPESAsync(string SRVNAME, string DBNAME, string FORM, string[] FIELDS, string MVALSEP)
        {
            this.DBGETFIELDTYPESAsync(SRVNAME, DBNAME, FORM, FIELDS, MVALSEP, null);
        }

        /// <remarks/>
        public void DBGETFIELDTYPESAsync(string SRVNAME, string DBNAME, string FORM, string[] FIELDS, string MVALSEP, object userState)
        {
            if((this.DBGETFIELDTYPESOperationCompleted == null))
            {
                this.DBGETFIELDTYPESOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDBGETFIELDTYPESOperationCompleted);
            }
            this.InvokeAsync("DBGETFIELDTYPES", new object[] {
                        SRVNAME,
                        DBNAME,
                        FORM,
                        FIELDS,
                        MVALSEP}, this.DBGETFIELDTYPESOperationCompleted, userState);
        }

        private void OnDBGETFIELDTYPESOperationCompleted(object arg)
        {
            if((this.DBGETFIELDTYPESCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DBGETFIELDTYPESCompleted(this, new DBGETFIELDTYPESCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("DBREADDOCFIELDS", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Bare)]
        [return: System.Xml.Serialization.XmlArrayAttribute("DBREADDOCFIELDSReturn", Namespace = "urn:DefaultNamespace")]
        [return: System.Xml.Serialization.XmlArrayItemAttribute("item", Form = System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable = false)]
        public string[] DBREADDOCFIELDS([System.Xml.Serialization.XmlElementAttribute(Namespace = "urn:DefaultNamespace")] string SRVNAME, [System.Xml.Serialization.XmlElementAttribute(Namespace = "urn:DefaultNamespace")] string DBNAME, [System.Xml.Serialization.XmlElementAttribute(Namespace = "urn:DefaultNamespace")] string VIEW, [System.Xml.Serialization.XmlElementAttribute(Namespace = "urn:DefaultNamespace")] string DOCUNID, [System.Xml.Serialization.XmlArrayAttribute(Namespace = "urn:DefaultNamespace")] [System.Xml.Serialization.XmlArrayItemAttribute("item", Form = System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable = false)] ref string[] FIELDS, [System.Xml.Serialization.XmlElementAttribute(Namespace = "urn:DefaultNamespace")] string MVALSEP)
        {
            object[] results = this.Invoke("DBREADDOCFIELDS", new object[] {
                        SRVNAME,
                        DBNAME,
                        VIEW,
                        DOCUNID,
                        FIELDS,
                        MVALSEP});
            FIELDS = ((string[])(results[1]));
            return ((string[])(results[0]));
        }

        /// <remarks/>
        public System.IAsyncResult BeginDBREADDOCFIELDS(string SRVNAME, string DBNAME, string VIEW, string DOCUNID, string[] FIELDS, string MVALSEP, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("DBREADDOCFIELDS", new object[] {
                        SRVNAME,
                        DBNAME,
                        VIEW,
                        DOCUNID,
                        FIELDS,
                        MVALSEP}, callback, asyncState);
        }

        /// <remarks/>
        public string[] EndDBREADDOCFIELDS(System.IAsyncResult asyncResult, out string[] FIELDS)
        {
            object[] results = this.EndInvoke(asyncResult);
            FIELDS = ((string[])(results[1]));
            return ((string[])(results[0]));
        }

        /// <remarks/>
        public void DBREADDOCFIELDSAsync(string SRVNAME, string DBNAME, string VIEW, string DOCUNID, string[] FIELDS, string MVALSEP)
        {
            this.DBREADDOCFIELDSAsync(SRVNAME, DBNAME, VIEW, DOCUNID, FIELDS, MVALSEP, null);
        }

        /// <remarks/>
        public void DBREADDOCFIELDSAsync(string SRVNAME, string DBNAME, string VIEW, string DOCUNID, string[] FIELDS, string MVALSEP, object userState)
        {
            if((this.DBREADDOCFIELDSOperationCompleted == null))
            {
                this.DBREADDOCFIELDSOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDBREADDOCFIELDSOperationCompleted);
            }
            this.InvokeAsync("DBREADDOCFIELDS", new object[] {
                        SRVNAME,
                        DBNAME,
                        VIEW,
                        DOCUNID,
                        FIELDS,
                        MVALSEP}, this.DBREADDOCFIELDSOperationCompleted, userState);
        }

        private void OnDBREADDOCFIELDSOperationCompleted(object arg)
        {
            if((this.DBREADDOCFIELDSCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DBREADDOCFIELDSCompleted(this, new DBREADDOCFIELDSCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("DBREADPROFILEFIELDS", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Bare)]
        [return: System.Xml.Serialization.XmlArrayAttribute("DBREADPROFILEFIELDSReturn", Namespace = "urn:DefaultNamespace")]
        [return: System.Xml.Serialization.XmlArrayItemAttribute("item", Form = System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable = false)]
        public string[] DBREADPROFILEFIELDS([System.Xml.Serialization.XmlElementAttribute(Namespace = "urn:DefaultNamespace")] string SRVNAME, [System.Xml.Serialization.XmlElementAttribute(Namespace = "urn:DefaultNamespace")] string DBNAME, [System.Xml.Serialization.XmlElementAttribute(Namespace = "urn:DefaultNamespace")] string PROFNAME, [System.Xml.Serialization.XmlElementAttribute(Namespace = "urn:DefaultNamespace")] string PROFKEY, [System.Xml.Serialization.XmlArrayAttribute(Namespace = "urn:DefaultNamespace")] [System.Xml.Serialization.XmlArrayItemAttribute("item", Form = System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable = false)] ref string[] FIELDS, [System.Xml.Serialization.XmlElementAttribute(Namespace = "urn:DefaultNamespace")] string MVALSEP)
        {
            object[] results = this.Invoke("DBREADPROFILEFIELDS", new object[] {
                        SRVNAME,
                        DBNAME,
                        PROFNAME,
                        PROFKEY,
                        FIELDS,
                        MVALSEP});
            FIELDS = ((string[])(results[1]));
            return ((string[])(results[0]));
        }

        /// <remarks/>
        public System.IAsyncResult BeginDBREADPROFILEFIELDS(string SRVNAME, string DBNAME, string PROFNAME, string PROFKEY, string[] FIELDS, string MVALSEP, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("DBREADPROFILEFIELDS", new object[] {
                        SRVNAME,
                        DBNAME,
                        PROFNAME,
                        PROFKEY,
                        FIELDS,
                        MVALSEP}, callback, asyncState);
        }

        /// <remarks/>
        public string[] EndDBREADPROFILEFIELDS(System.IAsyncResult asyncResult, out string[] FIELDS)
        {
            object[] results = this.EndInvoke(asyncResult);
            FIELDS = ((string[])(results[1]));
            return ((string[])(results[0]));
        }

        /// <remarks/>
        public void DBREADPROFILEFIELDSAsync(string SRVNAME, string DBNAME, string PROFNAME, string PROFKEY, string[] FIELDS, string MVALSEP)
        {
            this.DBREADPROFILEFIELDSAsync(SRVNAME, DBNAME, PROFNAME, PROFKEY, FIELDS, MVALSEP, null);
        }

        /// <remarks/>
        public void DBREADPROFILEFIELDSAsync(string SRVNAME, string DBNAME, string PROFNAME, string PROFKEY, string[] FIELDS, string MVALSEP, object userState)
        {
            if((this.DBREADPROFILEFIELDSOperationCompleted == null))
            {
                this.DBREADPROFILEFIELDSOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDBREADPROFILEFIELDSOperationCompleted);
            }
            this.InvokeAsync("DBREADPROFILEFIELDS", new object[] {
                        SRVNAME,
                        DBNAME,
                        PROFNAME,
                        PROFKEY,
                        FIELDS,
                        MVALSEP}, this.DBREADPROFILEFIELDSOperationCompleted, userState);
        }

        private void OnDBREADPROFILEFIELDSOperationCompleted(object arg)
        {
            if((this.DBREADPROFILEFIELDSCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DBREADPROFILEFIELDSCompleted(this, new DBREADPROFILEFIELDSCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("DBSAVEDOCFIELDS", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Bare)]
        [return: System.Xml.Serialization.XmlElementAttribute("DBSAVEDOCFIELDSReturn", Namespace = "urn:DefaultNamespace")]
        public string DBSAVEDOCFIELDS([System.Xml.Serialization.XmlElementAttribute(Namespace = "urn:DefaultNamespace")] string SRVNAME, [System.Xml.Serialization.XmlElementAttribute(Namespace = "urn:DefaultNamespace")] string DBNAME, [System.Xml.Serialization.XmlElementAttribute(Namespace = "urn:DefaultNamespace")] string DOCUNID, [System.Xml.Serialization.XmlArrayAttribute(Namespace = "urn:DefaultNamespace")] [System.Xml.Serialization.XmlArrayItemAttribute("item", Form = System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable = false)] ref string[] FIELDS, [System.Xml.Serialization.XmlArrayAttribute(Namespace = "urn:DefaultNamespace")] [System.Xml.Serialization.XmlArrayItemAttribute("item", Form = System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable = false)] ref string[] TYPES, [System.Xml.Serialization.XmlArrayAttribute(Namespace = "urn:DefaultNamespace")] [System.Xml.Serialization.XmlArrayItemAttribute("item", Form = System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable = false)] ref string[] VALUES, [System.Xml.Serialization.XmlElementAttribute(Namespace = "urn:DefaultNamespace")] string MVALSEP, [System.Xml.Serialization.XmlElementAttribute(Namespace = "urn:DefaultNamespace")] string FORM, [System.Xml.Serialization.XmlElementAttribute(Namespace = "urn:DefaultNamespace")] bool COMPWF, [System.Xml.Serialization.XmlElementAttribute(Namespace = "urn:DefaultNamespace")] string SAVERPC)
        {
            object[] results = this.Invoke("DBSAVEDOCFIELDS", new object[] {
                        SRVNAME,
                        DBNAME,
                        DOCUNID,
                        FIELDS,
                        TYPES,
                        VALUES,
                        MVALSEP,
                        FORM,
                        COMPWF,
                        SAVERPC});
            FIELDS = ((string[])(results[1]));
            TYPES = ((string[])(results[2]));
            VALUES = ((string[])(results[3]));
            return ((string)(results[0]));
        }

        /// <remarks/>
        public System.IAsyncResult BeginDBSAVEDOCFIELDS(string SRVNAME, string DBNAME, string DOCUNID, string[] FIELDS, string[] TYPES, string[] VALUES, string MVALSEP, string FORM, bool COMPWF, string SAVERPC, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("DBSAVEDOCFIELDS", new object[] {
                        SRVNAME,
                        DBNAME,
                        DOCUNID,
                        FIELDS,
                        TYPES,
                        VALUES,
                        MVALSEP,
                        FORM,
                        COMPWF,
                        SAVERPC}, callback, asyncState);
        }

        /// <remarks/>
        public string EndDBSAVEDOCFIELDS(System.IAsyncResult asyncResult, out string[] FIELDS, out string[] TYPES, out string[] VALUES)
        {
            object[] results = this.EndInvoke(asyncResult);
            FIELDS = ((string[])(results[1]));
            TYPES = ((string[])(results[2]));
            VALUES = ((string[])(results[3]));
            return ((string)(results[0]));
        }

        /// <remarks/>
        public void DBSAVEDOCFIELDSAsync(string SRVNAME, string DBNAME, string DOCUNID, string[] FIELDS, string[] TYPES, string[] VALUES, string MVALSEP, string FORM, bool COMPWF, string SAVERPC)
        {
            this.DBSAVEDOCFIELDSAsync(SRVNAME, DBNAME, DOCUNID, FIELDS, TYPES, VALUES, MVALSEP, FORM, COMPWF, SAVERPC, null);
        }

        /// <remarks/>
        public void DBSAVEDOCFIELDSAsync(string SRVNAME, string DBNAME, string DOCUNID, string[] FIELDS, string[] TYPES, string[] VALUES, string MVALSEP, string FORM, bool COMPWF, string SAVERPC, object userState)
        {
            if((this.DBSAVEDOCFIELDSOperationCompleted == null))
            {
                this.DBSAVEDOCFIELDSOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDBSAVEDOCFIELDSOperationCompleted);
            }
            this.InvokeAsync("DBSAVEDOCFIELDS", new object[] {
                        SRVNAME,
                        DBNAME,
                        DOCUNID,
                        FIELDS,
                        TYPES,
                        VALUES,
                        MVALSEP,
                        FORM,
                        COMPWF,
                        SAVERPC}, this.DBSAVEDOCFIELDSOperationCompleted, userState);
        }

        private void OnDBSAVEDOCFIELDSOperationCompleted(object arg)
        {
            if((this.DBSAVEDOCFIELDSCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DBSAVEDOCFIELDSCompleted(this, new DBSAVEDOCFIELDSCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("DBSAVEPROFILEFIELDS", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Bare)]
        [return: System.Xml.Serialization.XmlElementAttribute("DBSAVEPROFILEFIELDSReturn", Namespace = "urn:DefaultNamespace")]
        public string DBSAVEPROFILEFIELDS([System.Xml.Serialization.XmlElementAttribute(Namespace = "urn:DefaultNamespace")] string SRVNAME, [System.Xml.Serialization.XmlElementAttribute(Namespace = "urn:DefaultNamespace")] string DBNAME, [System.Xml.Serialization.XmlElementAttribute(Namespace = "urn:DefaultNamespace")] string PROFNAME, [System.Xml.Serialization.XmlElementAttribute(Namespace = "urn:DefaultNamespace")] string PROFKEY, [System.Xml.Serialization.XmlArrayAttribute(Namespace = "urn:DefaultNamespace")] [System.Xml.Serialization.XmlArrayItemAttribute("item", Form = System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable = false)] ref string[] FIELDS, [System.Xml.Serialization.XmlArrayAttribute(Namespace = "urn:DefaultNamespace")] [System.Xml.Serialization.XmlArrayItemAttribute("item", Form = System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable = false)] ref string[] TYPES, [System.Xml.Serialization.XmlArrayAttribute(Namespace = "urn:DefaultNamespace")] [System.Xml.Serialization.XmlArrayItemAttribute("item", Form = System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable = false)] ref string[] VALUES, [System.Xml.Serialization.XmlElementAttribute(Namespace = "urn:DefaultNamespace")] string MVALSEP)
        {
            object[] results = this.Invoke("DBSAVEPROFILEFIELDS", new object[] {
                        SRVNAME,
                        DBNAME,
                        PROFNAME,
                        PROFKEY,
                        FIELDS,
                        TYPES,
                        VALUES,
                        MVALSEP});
            FIELDS = ((string[])(results[1]));
            TYPES = ((string[])(results[2]));
            VALUES = ((string[])(results[3]));
            return ((string)(results[0]));
        }

        /// <remarks/>
        public System.IAsyncResult BeginDBSAVEPROFILEFIELDS(string SRVNAME, string DBNAME, string PROFNAME, string PROFKEY, string[] FIELDS, string[] TYPES, string[] VALUES, string MVALSEP, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("DBSAVEPROFILEFIELDS", new object[] {
                        SRVNAME,
                        DBNAME,
                        PROFNAME,
                        PROFKEY,
                        FIELDS,
                        TYPES,
                        VALUES,
                        MVALSEP}, callback, asyncState);
        }

        /// <remarks/>
        public string EndDBSAVEPROFILEFIELDS(System.IAsyncResult asyncResult, out string[] FIELDS, out string[] TYPES, out string[] VALUES)
        {
            object[] results = this.EndInvoke(asyncResult);
            FIELDS = ((string[])(results[1]));
            TYPES = ((string[])(results[2]));
            VALUES = ((string[])(results[3]));
            return ((string)(results[0]));
        }

        /// <remarks/>
        public void DBSAVEPROFILEFIELDSAsync(string SRVNAME, string DBNAME, string PROFNAME, string PROFKEY, string[] FIELDS, string[] TYPES, string[] VALUES, string MVALSEP)
        {
            this.DBSAVEPROFILEFIELDSAsync(SRVNAME, DBNAME, PROFNAME, PROFKEY, FIELDS, TYPES, VALUES, MVALSEP, null);
        }

        /// <remarks/>
        public void DBSAVEPROFILEFIELDSAsync(string SRVNAME, string DBNAME, string PROFNAME, string PROFKEY, string[] FIELDS, string[] TYPES, string[] VALUES, string MVALSEP, object userState)
        {
            if((this.DBSAVEPROFILEFIELDSOperationCompleted == null))
            {
                this.DBSAVEPROFILEFIELDSOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDBSAVEPROFILEFIELDSOperationCompleted);
            }
            this.InvokeAsync("DBSAVEPROFILEFIELDS", new object[] {
                        SRVNAME,
                        DBNAME,
                        PROFNAME,
                        PROFKEY,
                        FIELDS,
                        TYPES,
                        VALUES,
                        MVALSEP}, this.DBSAVEPROFILEFIELDSOperationCompleted, userState);
        }

        private void OnDBSAVEPROFILEFIELDSOperationCompleted(object arg)
        {
            if((this.DBSAVEPROFILEFIELDSCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DBSAVEPROFILEFIELDSCompleted(this, new DBSAVEPROFILEFIELDSCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("DBRENDERDOC", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Bare)]
        [return: System.Xml.Serialization.XmlElementAttribute("DBRENDERDOCReturn", Namespace = "urn:DefaultNamespace")]
        public string DBRENDERDOC([System.Xml.Serialization.XmlElementAttribute(Namespace = "urn:DefaultNamespace")] string SRVNAME, [System.Xml.Serialization.XmlElementAttribute(Namespace = "urn:DefaultNamespace")] string DBNAME, [System.Xml.Serialization.XmlElementAttribute(Namespace = "urn:DefaultNamespace")] string DOCUNID, [System.Xml.Serialization.XmlElementAttribute(Namespace = "urn:DefaultNamespace")] string FORM, [System.Xml.Serialization.XmlElementAttribute(Namespace = "urn:DefaultNamespace")] bool NOCACHE)
        {
            object[] results = this.Invoke("DBRENDERDOC", new object[] {
                        SRVNAME,
                        DBNAME,
                        DOCUNID,
                        FORM,
                        NOCACHE});
            return ((string)(results[0]));
        }

        /// <remarks/>
        public System.IAsyncResult BeginDBRENDERDOC(string SRVNAME, string DBNAME, string DOCUNID, string FORM, bool NOCACHE, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("DBRENDERDOC", new object[] {
                        SRVNAME,
                        DBNAME,
                        DOCUNID,
                        FORM,
                        NOCACHE}, callback, asyncState);
        }

        /// <remarks/>
        public string EndDBRENDERDOC(System.IAsyncResult asyncResult)
        {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }

        /// <remarks/>
        public void DBRENDERDOCAsync(string SRVNAME, string DBNAME, string DOCUNID, string FORM, bool NOCACHE)
        {
            this.DBRENDERDOCAsync(SRVNAME, DBNAME, DOCUNID, FORM, NOCACHE, null);
        }

        /// <remarks/>
        public void DBRENDERDOCAsync(string SRVNAME, string DBNAME, string DOCUNID, string FORM, bool NOCACHE, object userState)
        {
            if((this.DBRENDERDOCOperationCompleted == null))
            {
                this.DBRENDERDOCOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDBRENDERDOCOperationCompleted);
            }
            this.InvokeAsync("DBRENDERDOC", new object[] {
                        SRVNAME,
                        DBNAME,
                        DOCUNID,
                        FORM,
                        NOCACHE}, this.DBRENDERDOCOperationCompleted, userState);
        }

        private void OnDBRENDERDOCOperationCompleted(object arg)
        {
            if((this.DBRENDERDOCCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DBRENDERDOCCompleted(this, new DBRENDERDOCCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("DBDELETEDOC", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Bare)]
        [return: System.Xml.Serialization.XmlElementAttribute("DBDELETEDOCReturn", Namespace = "urn:DefaultNamespace")]
        public string DBDELETEDOC([System.Xml.Serialization.XmlElementAttribute(Namespace = "urn:DefaultNamespace")] string SRVNAME, [System.Xml.Serialization.XmlElementAttribute(Namespace = "urn:DefaultNamespace")] string DBNAME, [System.Xml.Serialization.XmlElementAttribute(Namespace = "urn:DefaultNamespace")] string DOCUNID, [System.Xml.Serialization.XmlElementAttribute(Namespace = "urn:DefaultNamespace")] bool FORCE)
        {
            object[] results = this.Invoke("DBDELETEDOC", new object[] {
                        SRVNAME,
                        DBNAME,
                        DOCUNID,
                        FORCE});
            return ((string)(results[0]));
        }

        /// <remarks/>
        public System.IAsyncResult BeginDBDELETEDOC(string SRVNAME, string DBNAME, string DOCUNID, bool FORCE, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("DBDELETEDOC", new object[] {
                        SRVNAME,
                        DBNAME,
                        DOCUNID,
                        FORCE}, callback, asyncState);
        }

        /// <remarks/>
        public string EndDBDELETEDOC(System.IAsyncResult asyncResult)
        {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }

        /// <remarks/>
        public void DBDELETEDOCAsync(string SRVNAME, string DBNAME, string DOCUNID, bool FORCE)
        {
            this.DBDELETEDOCAsync(SRVNAME, DBNAME, DOCUNID, FORCE, null);
        }

        /// <remarks/>
        public void DBDELETEDOCAsync(string SRVNAME, string DBNAME, string DOCUNID, bool FORCE, object userState)
        {
            if((this.DBDELETEDOCOperationCompleted == null))
            {
                this.DBDELETEDOCOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDBDELETEDOCOperationCompleted);
            }
            this.InvokeAsync("DBDELETEDOC", new object[] {
                        SRVNAME,
                        DBNAME,
                        DOCUNID,
                        FORCE}, this.DBDELETEDOCOperationCompleted, userState);
        }

        private void OnDBDELETEDOCOperationCompleted(object arg)
        {
            if((this.DBDELETEDOCCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DBDELETEDOCCompleted(this, new DBDELETEDOCCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("DBGETMAILINFO", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Bare)]
        [return: System.Xml.Serialization.XmlArrayAttribute("DBGETMAILINFOReturn", Namespace = "urn:DefaultNamespace")]
        [return: System.Xml.Serialization.XmlArrayItemAttribute("item", Form = System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable = false)]
        public string[] DBGETMAILINFO([System.Xml.Serialization.XmlElementAttribute(Namespace = "urn:DefaultNamespace")] string USERNAME)
        {
            object[] results = this.Invoke("DBGETMAILINFO", new object[] {
                        USERNAME});
            return ((string[])(results[0]));
        }

        /// <remarks/>
        public System.IAsyncResult BeginDBGETMAILINFO(string USERNAME, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("DBGETMAILINFO", new object[] {
                        USERNAME}, callback, asyncState);
        }

        /// <remarks/>
        public string[] EndDBGETMAILINFO(System.IAsyncResult asyncResult)
        {
            object[] results = this.EndInvoke(asyncResult);
            return ((string[])(results[0]));
        }

        /// <remarks/>
        public void DBGETMAILINFOAsync(string USERNAME)
        {
            this.DBGETMAILINFOAsync(USERNAME, null);
        }

        /// <remarks/>
        public void DBGETMAILINFOAsync(string USERNAME, object userState)
        {
            if((this.DBGETMAILINFOOperationCompleted == null))
            {
                this.DBGETMAILINFOOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDBGETMAILINFOOperationCompleted);
            }
            this.InvokeAsync("DBGETMAILINFO", new object[] {
                        USERNAME}, this.DBGETMAILINFOOperationCompleted, userState);
        }

        private void OnDBGETMAILINFOOperationCompleted(object arg)
        {
            if((this.DBGETMAILINFOCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DBGETMAILINFOCompleted(this, new DBGETMAILINFOCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("DBLOOKUPNAMES", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Bare)]
        [return: System.Xml.Serialization.XmlArrayAttribute("DBLOOKUPNAMESReturn", Namespace = "urn:DefaultNamespace")]
        [return: System.Xml.Serialization.XmlArrayItemAttribute("item", Form = System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable = false)]
        public string[] DBLOOKUPNAMES([System.Xml.Serialization.XmlElementAttribute(Namespace = "urn:DefaultNamespace")] string SERVERNAME, [System.Xml.Serialization.XmlElementAttribute(Namespace = "urn:DefaultNamespace")] string VIEWNAME, [System.Xml.Serialization.XmlArrayAttribute(Namespace = "urn:DefaultNamespace")] [System.Xml.Serialization.XmlArrayItemAttribute("item", Form = System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable = false)] ref string[] SEARCHSTR, [System.Xml.Serialization.XmlArrayAttribute(Namespace = "urn:DefaultNamespace")] [System.Xml.Serialization.XmlArrayItemAttribute("item", Form = System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable = false)] ref string[] ITEMS, [System.Xml.Serialization.XmlElementAttribute(Namespace = "urn:DefaultNamespace")] bool PARTIALMATCH, [System.Xml.Serialization.XmlElementAttribute(Namespace = "urn:DefaultNamespace")] string MVALSEP, [System.Xml.Serialization.XmlElementAttribute(Namespace = "urn:DefaultNamespace")] bool ROWFORMAT)
        {
            object[] results = this.Invoke("DBLOOKUPNAMES", new object[] {
                        SERVERNAME,
                        VIEWNAME,
                        SEARCHSTR,
                        ITEMS,
                        PARTIALMATCH,
                        MVALSEP,
                        ROWFORMAT});
            SEARCHSTR = ((string[])(results[1]));
            ITEMS = ((string[])(results[2]));
            return ((string[])(results[0]));
        }

        /// <remarks/>
        public System.IAsyncResult BeginDBLOOKUPNAMES(string SERVERNAME, string VIEWNAME, string[] SEARCHSTR, string[] ITEMS, bool PARTIALMATCH, string MVALSEP, bool ROWFORMAT, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("DBLOOKUPNAMES", new object[] {
                        SERVERNAME,
                        VIEWNAME,
                        SEARCHSTR,
                        ITEMS,
                        PARTIALMATCH,
                        MVALSEP,
                        ROWFORMAT}, callback, asyncState);
        }

        /// <remarks/>
        public string[] EndDBLOOKUPNAMES(System.IAsyncResult asyncResult, out string[] SEARCHSTR, out string[] ITEMS)
        {
            object[] results = this.EndInvoke(asyncResult);
            SEARCHSTR = ((string[])(results[1]));
            ITEMS = ((string[])(results[2]));
            return ((string[])(results[0]));
        }

        /// <remarks/>
        public void DBLOOKUPNAMESAsync(string SERVERNAME, string VIEWNAME, string[] SEARCHSTR, string[] ITEMS, bool PARTIALMATCH, string MVALSEP, bool ROWFORMAT)
        {
            this.DBLOOKUPNAMESAsync(SERVERNAME, VIEWNAME, SEARCHSTR, ITEMS, PARTIALMATCH, MVALSEP, ROWFORMAT, null);
        }

        /// <remarks/>
        public void DBLOOKUPNAMESAsync(string SERVERNAME, string VIEWNAME, string[] SEARCHSTR, string[] ITEMS, bool PARTIALMATCH, string MVALSEP, bool ROWFORMAT, object userState)
        {
            if((this.DBLOOKUPNAMESOperationCompleted == null))
            {
                this.DBLOOKUPNAMESOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDBLOOKUPNAMESOperationCompleted);
            }
            this.InvokeAsync("DBLOOKUPNAMES", new object[] {
                        SERVERNAME,
                        VIEWNAME,
                        SEARCHSTR,
                        ITEMS,
                        PARTIALMATCH,
                        MVALSEP,
                        ROWFORMAT}, this.DBLOOKUPNAMESOperationCompleted, userState);
        }

        private void OnDBLOOKUPNAMESOperationCompleted(object arg)
        {
            if((this.DBLOOKUPNAMESCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DBLOOKUPNAMESCompleted(this, new DBLOOKUPNAMESCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("DBLOOKUPALLNAMES", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Bare)]
        [return: System.Xml.Serialization.XmlArrayAttribute("DBLOOKUPALLNAMESReturn", Namespace = "urn:DefaultNamespace")]
        [return: System.Xml.Serialization.XmlArrayItemAttribute("item", Form = System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable = false)]
        public string[] DBLOOKUPALLNAMES([System.Xml.Serialization.XmlElementAttribute(Namespace = "urn:DefaultNamespace")] string SERVERNAME, [System.Xml.Serialization.XmlElementAttribute(Namespace = "urn:DefaultNamespace")] string VIEWNAME, [System.Xml.Serialization.XmlArrayAttribute(Namespace = "urn:DefaultNamespace")] [System.Xml.Serialization.XmlArrayItemAttribute("item", Form = System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable = false)] ref string[] ITEMS, [System.Xml.Serialization.XmlElementAttribute(Namespace = "urn:DefaultNamespace")] string MVALSEP, [System.Xml.Serialization.XmlElementAttribute(Namespace = "urn:DefaultNamespace")] bool ROWFORMAT)
        {
            object[] results = this.Invoke("DBLOOKUPALLNAMES", new object[] {
                        SERVERNAME,
                        VIEWNAME,
                        ITEMS,
                        MVALSEP,
                        ROWFORMAT});
            ITEMS = ((string[])(results[1]));
            return ((string[])(results[0]));
        }

        /// <remarks/>
        public System.IAsyncResult BeginDBLOOKUPALLNAMES(string SERVERNAME, string VIEWNAME, string[] ITEMS, string MVALSEP, bool ROWFORMAT, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("DBLOOKUPALLNAMES", new object[] {
                        SERVERNAME,
                        VIEWNAME,
                        ITEMS,
                        MVALSEP,
                        ROWFORMAT}, callback, asyncState);
        }

        /// <remarks/>
        public string[] EndDBLOOKUPALLNAMES(System.IAsyncResult asyncResult, out string[] ITEMS)
        {
            object[] results = this.EndInvoke(asyncResult);
            ITEMS = ((string[])(results[1]));
            return ((string[])(results[0]));
        }

        /// <remarks/>
        public void DBLOOKUPALLNAMESAsync(string SERVERNAME, string VIEWNAME, string[] ITEMS, string MVALSEP, bool ROWFORMAT)
        {
            this.DBLOOKUPALLNAMESAsync(SERVERNAME, VIEWNAME, ITEMS, MVALSEP, ROWFORMAT, null);
        }

        /// <remarks/>
        public void DBLOOKUPALLNAMESAsync(string SERVERNAME, string VIEWNAME, string[] ITEMS, string MVALSEP, bool ROWFORMAT, object userState)
        {
            if((this.DBLOOKUPALLNAMESOperationCompleted == null))
            {
                this.DBLOOKUPALLNAMESOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDBLOOKUPALLNAMESOperationCompleted);
            }
            this.InvokeAsync("DBLOOKUPALLNAMES", new object[] {
                        SERVERNAME,
                        VIEWNAME,
                        ITEMS,
                        MVALSEP,
                        ROWFORMAT}, this.DBLOOKUPALLNAMESOperationCompleted, userState);
        }

        private void OnDBLOOKUPALLNAMESOperationCompleted(object arg)
        {
            if((this.DBLOOKUPALLNAMESCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DBLOOKUPALLNAMESCompleted(this, new DBLOOKUPALLNAMESCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("DBSENDDOCUMENT", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Bare)]
        [return: System.Xml.Serialization.XmlElementAttribute("DBSENDDOCUMENTReturn", Namespace = "urn:DefaultNamespace")]
        public string DBSENDDOCUMENT([System.Xml.Serialization.XmlElementAttribute(Namespace = "urn:DefaultNamespace")] string SRVNAME, [System.Xml.Serialization.XmlElementAttribute(Namespace = "urn:DefaultNamespace")] string DBNAME, [System.Xml.Serialization.XmlElementAttribute(Namespace = "urn:DefaultNamespace")] string DOCUNID, [System.Xml.Serialization.XmlElementAttribute(Namespace = "urn:DefaultNamespace")] string MVALSEP, [System.Xml.Serialization.XmlElementAttribute(Namespace = "urn:DefaultNamespace")] bool ATTACHFORM, [System.Xml.Serialization.XmlArrayAttribute(Namespace = "urn:DefaultNamespace")] [System.Xml.Serialization.XmlArrayItemAttribute("item", Form = System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable = false)] ref string[] RECIPIENTS)
        {
            object[] results = this.Invoke("DBSENDDOCUMENT", new object[] {
                        SRVNAME,
                        DBNAME,
                        DOCUNID,
                        MVALSEP,
                        ATTACHFORM,
                        RECIPIENTS});
            RECIPIENTS = ((string[])(results[1]));
            return ((string)(results[0]));
        }

        /// <remarks/>
        public System.IAsyncResult BeginDBSENDDOCUMENT(string SRVNAME, string DBNAME, string DOCUNID, string MVALSEP, bool ATTACHFORM, string[] RECIPIENTS, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("DBSENDDOCUMENT", new object[] {
                        SRVNAME,
                        DBNAME,
                        DOCUNID,
                        MVALSEP,
                        ATTACHFORM,
                        RECIPIENTS}, callback, asyncState);
        }

        /// <remarks/>
        public string EndDBSENDDOCUMENT(System.IAsyncResult asyncResult, out string[] RECIPIENTS)
        {
            object[] results = this.EndInvoke(asyncResult);
            RECIPIENTS = ((string[])(results[1]));
            return ((string)(results[0]));
        }

        /// <remarks/>
        public void DBSENDDOCUMENTAsync(string SRVNAME, string DBNAME, string DOCUNID, string MVALSEP, bool ATTACHFORM, string[] RECIPIENTS)
        {
            this.DBSENDDOCUMENTAsync(SRVNAME, DBNAME, DOCUNID, MVALSEP, ATTACHFORM, RECIPIENTS, null);
        }

        /// <remarks/>
        public void DBSENDDOCUMENTAsync(string SRVNAME, string DBNAME, string DOCUNID, string MVALSEP, bool ATTACHFORM, string[] RECIPIENTS, object userState)
        {
            if((this.DBSENDDOCUMENTOperationCompleted == null))
            {
                this.DBSENDDOCUMENTOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDBSENDDOCUMENTOperationCompleted);
            }
            this.InvokeAsync("DBSENDDOCUMENT", new object[] {
                        SRVNAME,
                        DBNAME,
                        DOCUNID,
                        MVALSEP,
                        ATTACHFORM,
                        RECIPIENTS}, this.DBSENDDOCUMENTOperationCompleted, userState);
        }

        private void OnDBSENDDOCUMENTOperationCompleted(object arg)
        {
            if((this.DBSENDDOCUMENTCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DBSENDDOCUMENTCompleted(this, new DBSENDDOCUMENTCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("DBVIEWS", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Bare)]
        [return: System.Xml.Serialization.XmlElementAttribute("DBVIEWSReturn", Namespace = "urn:DefaultNamespace")]
        public string DBVIEWS([System.Xml.Serialization.XmlElementAttribute(Namespace = "urn:DefaultNamespace")] string SRVNAME, [System.Xml.Serialization.XmlElementAttribute(Namespace = "urn:DefaultNamespace")] string DBNAME, [System.Xml.Serialization.XmlElementAttribute(Namespace = "urn:DefaultNamespace")] bool VIEWONLY, [System.Xml.Serialization.XmlElementAttribute(Namespace = "urn:DefaultNamespace")] bool FOLDERONLY, [System.Xml.Serialization.XmlElementAttribute(Namespace = "urn:DefaultNamespace")] bool SHAREDONLY, [System.Xml.Serialization.XmlElementAttribute(Namespace = "urn:DefaultNamespace")] bool PRIVATEONLY, [System.Xml.Serialization.XmlElementAttribute(Namespace = "urn:DefaultNamespace")] bool INCLUDEHIDDEN)
        {
            object[] results = this.Invoke("DBVIEWS", new object[] {
                        SRVNAME,
                        DBNAME,
                        VIEWONLY,
                        FOLDERONLY,
                        SHAREDONLY,
                        PRIVATEONLY,
                        INCLUDEHIDDEN});
            return ((string)(results[0]));
        }

        /// <remarks/>
        public System.IAsyncResult BeginDBVIEWS(string SRVNAME, string DBNAME, bool VIEWONLY, bool FOLDERONLY, bool SHAREDONLY, bool PRIVATEONLY, bool INCLUDEHIDDEN, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("DBVIEWS", new object[] {
                        SRVNAME,
                        DBNAME,
                        VIEWONLY,
                        FOLDERONLY,
                        SHAREDONLY,
                        PRIVATEONLY,
                        INCLUDEHIDDEN}, callback, asyncState);
        }

        /// <remarks/>
        public string EndDBVIEWS(System.IAsyncResult asyncResult)
        {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }

        /// <remarks/>
        public void DBVIEWSAsync(string SRVNAME, string DBNAME, bool VIEWONLY, bool FOLDERONLY, bool SHAREDONLY, bool PRIVATEONLY, bool INCLUDEHIDDEN)
        {
            this.DBVIEWSAsync(SRVNAME, DBNAME, VIEWONLY, FOLDERONLY, SHAREDONLY, PRIVATEONLY, INCLUDEHIDDEN, null);
        }

        /// <remarks/>
        public void DBVIEWSAsync(string SRVNAME, string DBNAME, bool VIEWONLY, bool FOLDERONLY, bool SHAREDONLY, bool PRIVATEONLY, bool INCLUDEHIDDEN, object userState)
        {
            if((this.DBVIEWSOperationCompleted == null))
            {
                this.DBVIEWSOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDBVIEWSOperationCompleted);
            }
            this.InvokeAsync("DBVIEWS", new object[] {
                        SRVNAME,
                        DBNAME,
                        VIEWONLY,
                        FOLDERONLY,
                        SHAREDONLY,
                        PRIVATEONLY,
                        INCLUDEHIDDEN}, this.DBVIEWSOperationCompleted, userState);
        }

        private void OnDBVIEWSOperationCompleted(object arg)
        {
            if((this.DBVIEWSCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DBVIEWSCompleted(this, new DBVIEWSCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("DBOUTLINEVIEWS", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Bare)]
        [return: System.Xml.Serialization.XmlElementAttribute("DBOUTLINEVIEWSReturn", Namespace = "urn:DefaultNamespace")]
        public string DBOUTLINEVIEWS([System.Xml.Serialization.XmlElementAttribute(Namespace = "urn:DefaultNamespace")] string SRVNAME, [System.Xml.Serialization.XmlElementAttribute(Namespace = "urn:DefaultNamespace")] string DBNAME, [System.Xml.Serialization.XmlElementAttribute(Namespace = "urn:DefaultNamespace")] string OUTLINE, [System.Xml.Serialization.XmlElementAttribute(Namespace = "urn:DefaultNamespace")] bool EXCLUDEHIDDEN, [System.Xml.Serialization.XmlElementAttribute(Namespace = "urn:DefaultNamespace")] bool EXCLUDEWEB, [System.Xml.Serialization.XmlElementAttribute(Namespace = "urn:DefaultNamespace")] bool EXCLUDECLIENT, [System.Xml.Serialization.XmlElementAttribute(Namespace = "urn:DefaultNamespace")] bool KEEPHIERARCHY)
        {
            object[] results = this.Invoke("DBOUTLINEVIEWS", new object[] {
                        SRVNAME,
                        DBNAME,
                        OUTLINE,
                        EXCLUDEHIDDEN,
                        EXCLUDEWEB,
                        EXCLUDECLIENT,
                        KEEPHIERARCHY});
            return ((string)(results[0]));
        }

        /// <remarks/>
        public System.IAsyncResult BeginDBOUTLINEVIEWS(string SRVNAME, string DBNAME, string OUTLINE, bool EXCLUDEHIDDEN, bool EXCLUDEWEB, bool EXCLUDECLIENT, bool KEEPHIERARCHY, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("DBOUTLINEVIEWS", new object[] {
                        SRVNAME,
                        DBNAME,
                        OUTLINE,
                        EXCLUDEHIDDEN,
                        EXCLUDEWEB,
                        EXCLUDECLIENT,
                        KEEPHIERARCHY}, callback, asyncState);
        }

        /// <remarks/>
        public string EndDBOUTLINEVIEWS(System.IAsyncResult asyncResult)
        {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }

        /// <remarks/>
        public void DBOUTLINEVIEWSAsync(string SRVNAME, string DBNAME, string OUTLINE, bool EXCLUDEHIDDEN, bool EXCLUDEWEB, bool EXCLUDECLIENT, bool KEEPHIERARCHY)
        {
            this.DBOUTLINEVIEWSAsync(SRVNAME, DBNAME, OUTLINE, EXCLUDEHIDDEN, EXCLUDEWEB, EXCLUDECLIENT, KEEPHIERARCHY, null);
        }

        /// <remarks/>
        public void DBOUTLINEVIEWSAsync(string SRVNAME, string DBNAME, string OUTLINE, bool EXCLUDEHIDDEN, bool EXCLUDEWEB, bool EXCLUDECLIENT, bool KEEPHIERARCHY, object userState)
        {
            if((this.DBOUTLINEVIEWSOperationCompleted == null))
            {
                this.DBOUTLINEVIEWSOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDBOUTLINEVIEWSOperationCompleted);
            }
            this.InvokeAsync("DBOUTLINEVIEWS", new object[] {
                        SRVNAME,
                        DBNAME,
                        OUTLINE,
                        EXCLUDEHIDDEN,
                        EXCLUDEWEB,
                        EXCLUDECLIENT,
                        KEEPHIERARCHY}, this.DBOUTLINEVIEWSOperationCompleted, userState);
        }

        private void OnDBOUTLINEVIEWSOperationCompleted(object arg)
        {
            if((this.DBOUTLINEVIEWSCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DBOUTLINEVIEWSCompleted(this, new DBOUTLINEVIEWSCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("DBSEARCH", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Bare)]
        [return: System.Xml.Serialization.XmlArrayAttribute("DBSEARCHReturn", Namespace = "urn:DefaultNamespace")]
        [return: System.Xml.Serialization.XmlArrayItemAttribute("item", Form = System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable = false)]
        public string[] DBSEARCH([System.Xml.Serialization.XmlElementAttribute(Namespace = "urn:DefaultNamespace")] string SRVNAME, [System.Xml.Serialization.XmlElementAttribute(Namespace = "urn:DefaultNamespace")] string DBNAME, [System.Xml.Serialization.XmlElementAttribute(Namespace = "urn:DefaultNamespace")] string FORMULA, [System.Xml.Serialization.XmlElementAttribute(Namespace = "urn:DefaultNamespace")] string DATETIME, [System.Xml.Serialization.XmlElementAttribute(Namespace = "urn:DefaultNamespace")] short MAXDOCS, [System.Xml.Serialization.XmlArrayAttribute(Namespace = "urn:DefaultNamespace")] [System.Xml.Serialization.XmlArrayItemAttribute("item", Form = System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable = false)] ref string[] COLFIELDS, [System.Xml.Serialization.XmlElementAttribute(Namespace = "urn:DefaultNamespace")] string MVALSEP, [System.Xml.Serialization.XmlElementAttribute(Namespace = "urn:DefaultNamespace")] bool RETURNUNID, [System.Xml.Serialization.XmlElementAttribute(Namespace = "urn:DefaultNamespace")] bool ROWFORMAT)
        {
            object[] results = this.Invoke("DBSEARCH", new object[] {
                        SRVNAME,
                        DBNAME,
                        FORMULA,
                        DATETIME,
                        MAXDOCS,
                        COLFIELDS,
                        MVALSEP,
                        RETURNUNID,
                        ROWFORMAT});
            COLFIELDS = ((string[])(results[1]));
            return ((string[])(results[0]));
        }

        /// <remarks/>
        public System.IAsyncResult BeginDBSEARCH(string SRVNAME, string DBNAME, string FORMULA, string DATETIME, short MAXDOCS, string[] COLFIELDS, string MVALSEP, bool RETURNUNID, bool ROWFORMAT, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("DBSEARCH", new object[] {
                        SRVNAME,
                        DBNAME,
                        FORMULA,
                        DATETIME,
                        MAXDOCS,
                        COLFIELDS,
                        MVALSEP,
                        RETURNUNID,
                        ROWFORMAT}, callback, asyncState);
        }

        /// <remarks/>
        public string[] EndDBSEARCH(System.IAsyncResult asyncResult, out string[] COLFIELDS)
        {
            object[] results = this.EndInvoke(asyncResult);
            COLFIELDS = ((string[])(results[1]));
            return ((string[])(results[0]));
        }

        /// <remarks/>
        public void DBSEARCHAsync(string SRVNAME, string DBNAME, string FORMULA, string DATETIME, short MAXDOCS, string[] COLFIELDS, string MVALSEP, bool RETURNUNID, bool ROWFORMAT)
        {
            this.DBSEARCHAsync(SRVNAME, DBNAME, FORMULA, DATETIME, MAXDOCS, COLFIELDS, MVALSEP, RETURNUNID, ROWFORMAT, null);
        }

        /// <remarks/>
        public void DBSEARCHAsync(string SRVNAME, string DBNAME, string FORMULA, string DATETIME, short MAXDOCS, string[] COLFIELDS, string MVALSEP, bool RETURNUNID, bool ROWFORMAT, object userState)
        {
            if((this.DBSEARCHOperationCompleted == null))
            {
                this.DBSEARCHOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDBSEARCHOperationCompleted);
            }
            this.InvokeAsync("DBSEARCH", new object[] {
                        SRVNAME,
                        DBNAME,
                        FORMULA,
                        DATETIME,
                        MAXDOCS,
                        COLFIELDS,
                        MVALSEP,
                        RETURNUNID,
                        ROWFORMAT}, this.DBSEARCHOperationCompleted, userState);
        }

        private void OnDBSEARCHOperationCompleted(object arg)
        {
            if((this.DBSEARCHCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DBSEARCHCompleted(this, new DBSEARCHCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("DBFTSEARCH", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Bare)]
        [return: System.Xml.Serialization.XmlArrayAttribute("DBFTSEARCHReturn", Namespace = "urn:DefaultNamespace")]
        [return: System.Xml.Serialization.XmlArrayItemAttribute("item", Form = System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable = false)]
        public string[] DBFTSEARCH([System.Xml.Serialization.XmlElementAttribute(Namespace = "urn:DefaultNamespace")] string SRVNAME, [System.Xml.Serialization.XmlElementAttribute(Namespace = "urn:DefaultNamespace")] string DBNAME, [System.Xml.Serialization.XmlElementAttribute(Namespace = "urn:DefaultNamespace")] string QUERY, [System.Xml.Serialization.XmlElementAttribute(Namespace = "urn:DefaultNamespace")] short MAXDOCS, [System.Xml.Serialization.XmlElementAttribute(Namespace = "urn:DefaultNamespace")] short SORTOPTION, [System.Xml.Serialization.XmlElementAttribute(Namespace = "urn:DefaultNamespace")] short OTHEROPTIONS, [System.Xml.Serialization.XmlArrayAttribute(Namespace = "urn:DefaultNamespace")] [System.Xml.Serialization.XmlArrayItemAttribute("item", Form = System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable = false)] ref string[] COLFIELDS, [System.Xml.Serialization.XmlElementAttribute(Namespace = "urn:DefaultNamespace")] string MVALSEP, [System.Xml.Serialization.XmlElementAttribute(Namespace = "urn:DefaultNamespace")] bool RETURNUNID, [System.Xml.Serialization.XmlElementAttribute(Namespace = "urn:DefaultNamespace")] bool ROWFORMAT)
        {
            object[] results = this.Invoke("DBFTSEARCH", new object[] {
                        SRVNAME,
                        DBNAME,
                        QUERY,
                        MAXDOCS,
                        SORTOPTION,
                        OTHEROPTIONS,
                        COLFIELDS,
                        MVALSEP,
                        RETURNUNID,
                        ROWFORMAT});
            COLFIELDS = ((string[])(results[1]));
            return ((string[])(results[0]));
        }

        /// <remarks/>
        public System.IAsyncResult BeginDBFTSEARCH(string SRVNAME, string DBNAME, string QUERY, short MAXDOCS, short SORTOPTION, short OTHEROPTIONS, string[] COLFIELDS, string MVALSEP, bool RETURNUNID, bool ROWFORMAT, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("DBFTSEARCH", new object[] {
                        SRVNAME,
                        DBNAME,
                        QUERY,
                        MAXDOCS,
                        SORTOPTION,
                        OTHEROPTIONS,
                        COLFIELDS,
                        MVALSEP,
                        RETURNUNID,
                        ROWFORMAT}, callback, asyncState);
        }

        /// <remarks/>
        public string[] EndDBFTSEARCH(System.IAsyncResult asyncResult, out string[] COLFIELDS)
        {
            object[] results = this.EndInvoke(asyncResult);
            COLFIELDS = ((string[])(results[1]));
            return ((string[])(results[0]));
        }

        /// <remarks/>
        public void DBFTSEARCHAsync(string SRVNAME, string DBNAME, string QUERY, short MAXDOCS, short SORTOPTION, short OTHEROPTIONS, string[] COLFIELDS, string MVALSEP, bool RETURNUNID, bool ROWFORMAT)
        {
            this.DBFTSEARCHAsync(SRVNAME, DBNAME, QUERY, MAXDOCS, SORTOPTION, OTHEROPTIONS, COLFIELDS, MVALSEP, RETURNUNID, ROWFORMAT, null);
        }

        /// <remarks/>
        public void DBFTSEARCHAsync(string SRVNAME, string DBNAME, string QUERY, short MAXDOCS, short SORTOPTION, short OTHEROPTIONS, string[] COLFIELDS, string MVALSEP, bool RETURNUNID, bool ROWFORMAT, object userState)
        {
            if((this.DBFTSEARCHOperationCompleted == null))
            {
                this.DBFTSEARCHOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDBFTSEARCHOperationCompleted);
            }
            this.InvokeAsync("DBFTSEARCH", new object[] {
                        SRVNAME,
                        DBNAME,
                        QUERY,
                        MAXDOCS,
                        SORTOPTION,
                        OTHEROPTIONS,
                        COLFIELDS,
                        MVALSEP,
                        RETURNUNID,
                        ROWFORMAT}, this.DBFTSEARCHOperationCompleted, userState);
        }

        private void OnDBFTSEARCHOperationCompleted(object arg)
        {
            if((this.DBFTSEARCHCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DBFTSEARCHCompleted(this, new DBFTSEARCHCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("DBVIEWFTSEARCH", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Bare)]
        [return: System.Xml.Serialization.XmlArrayAttribute("DBVIEWFTSEARCHReturn", Namespace = "urn:DefaultNamespace")]
        [return: System.Xml.Serialization.XmlArrayItemAttribute("item", Form = System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable = false)]
        public string[] DBVIEWFTSEARCH([System.Xml.Serialization.XmlElementAttribute(Namespace = "urn:DefaultNamespace")] string SRVNAME, [System.Xml.Serialization.XmlElementAttribute(Namespace = "urn:DefaultNamespace")] string DBNAME, [System.Xml.Serialization.XmlElementAttribute(Namespace = "urn:DefaultNamespace")] string VIEWNAME, [System.Xml.Serialization.XmlElementAttribute(Namespace = "urn:DefaultNamespace")] string QUERY, [System.Xml.Serialization.XmlElementAttribute(Namespace = "urn:DefaultNamespace")] short MAXDOCS, [System.Xml.Serialization.XmlArrayAttribute(Namespace = "urn:DefaultNamespace")] [System.Xml.Serialization.XmlArrayItemAttribute("item", Form = System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable = false)] ref string[] COLFIELDS, [System.Xml.Serialization.XmlElementAttribute(Namespace = "urn:DefaultNamespace")] string MVALSEP, [System.Xml.Serialization.XmlElementAttribute(Namespace = "urn:DefaultNamespace")] bool RETURNUNID, [System.Xml.Serialization.XmlElementAttribute(Namespace = "urn:DefaultNamespace")] bool ROWFORMAT)
        {
            object[] results = this.Invoke("DBVIEWFTSEARCH", new object[] {
                        SRVNAME,
                        DBNAME,
                        VIEWNAME,
                        QUERY,
                        MAXDOCS,
                        COLFIELDS,
                        MVALSEP,
                        RETURNUNID,
                        ROWFORMAT});
            COLFIELDS = ((string[])(results[1]));
            return ((string[])(results[0]));
        }

        /// <remarks/>
        public System.IAsyncResult BeginDBVIEWFTSEARCH(string SRVNAME, string DBNAME, string VIEWNAME, string QUERY, short MAXDOCS, string[] COLFIELDS, string MVALSEP, bool RETURNUNID, bool ROWFORMAT, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("DBVIEWFTSEARCH", new object[] {
                        SRVNAME,
                        DBNAME,
                        VIEWNAME,
                        QUERY,
                        MAXDOCS,
                        COLFIELDS,
                        MVALSEP,
                        RETURNUNID,
                        ROWFORMAT}, callback, asyncState);
        }

        /// <remarks/>
        public string[] EndDBVIEWFTSEARCH(System.IAsyncResult asyncResult, out string[] COLFIELDS)
        {
            object[] results = this.EndInvoke(asyncResult);
            COLFIELDS = ((string[])(results[1]));
            return ((string[])(results[0]));
        }

        /// <remarks/>
        public void DBVIEWFTSEARCHAsync(string SRVNAME, string DBNAME, string VIEWNAME, string QUERY, short MAXDOCS, string[] COLFIELDS, string MVALSEP, bool RETURNUNID, bool ROWFORMAT)
        {
            this.DBVIEWFTSEARCHAsync(SRVNAME, DBNAME, VIEWNAME, QUERY, MAXDOCS, COLFIELDS, MVALSEP, RETURNUNID, ROWFORMAT, null);
        }

        /// <remarks/>
        public void DBVIEWFTSEARCHAsync(string SRVNAME, string DBNAME, string VIEWNAME, string QUERY, short MAXDOCS, string[] COLFIELDS, string MVALSEP, bool RETURNUNID, bool ROWFORMAT, object userState)
        {
            if((this.DBVIEWFTSEARCHOperationCompleted == null))
            {
                this.DBVIEWFTSEARCHOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDBVIEWFTSEARCHOperationCompleted);
            }
            this.InvokeAsync("DBVIEWFTSEARCH", new object[] {
                        SRVNAME,
                        DBNAME,
                        VIEWNAME,
                        QUERY,
                        MAXDOCS,
                        COLFIELDS,
                        MVALSEP,
                        RETURNUNID,
                        ROWFORMAT}, this.DBVIEWFTSEARCHOperationCompleted, userState);
        }

        private void OnDBVIEWFTSEARCHOperationCompleted(object arg)
        {
            if((this.DBVIEWFTSEARCHCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DBVIEWFTSEARCHCompleted(this, new DBVIEWFTSEARCHCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("DBCALLAGENT", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Bare)]
        [return: System.Xml.Serialization.XmlElementAttribute("DBCALLAGENTReturn", Namespace = "urn:DefaultNamespace")]
        public string DBCALLAGENT([System.Xml.Serialization.XmlElementAttribute(Namespace = "urn:DefaultNamespace")] string SRVNAME, [System.Xml.Serialization.XmlElementAttribute(Namespace = "urn:DefaultNamespace")] string DBNAME, [System.Xml.Serialization.XmlElementAttribute(Namespace = "urn:DefaultNamespace")] string AGENT, [System.Xml.Serialization.XmlElementAttribute(Namespace = "urn:DefaultNamespace")] string PARAMXML, [System.Xml.Serialization.XmlElementAttribute(Namespace = "urn:DefaultNamespace")] string NOTEID)
        {
            object[] results = this.Invoke("DBCALLAGENT", new object[] {
                        SRVNAME,
                        DBNAME,
                        AGENT,
                        PARAMXML,
                        NOTEID});
            return ((string)(results[0]));
        }

        /// <remarks/>
        public System.IAsyncResult BeginDBCALLAGENT(string SRVNAME, string DBNAME, string AGENT, string PARAMXML, string NOTEID, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("DBCALLAGENT", new object[] {
                        SRVNAME,
                        DBNAME,
                        AGENT,
                        PARAMXML,
                        NOTEID}, callback, asyncState);
        }

        /// <remarks/>
        public string EndDBCALLAGENT(System.IAsyncResult asyncResult)
        {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }

        /// <remarks/>
        public void DBCALLAGENTAsync(string SRVNAME, string DBNAME, string AGENT, string PARAMXML, string NOTEID)
        {
            this.DBCALLAGENTAsync(SRVNAME, DBNAME, AGENT, PARAMXML, NOTEID, null);
        }

        /// <remarks/>
        public void DBCALLAGENTAsync(string SRVNAME, string DBNAME, string AGENT, string PARAMXML, string NOTEID, object userState)
        {
            if((this.DBCALLAGENTOperationCompleted == null))
            {
                this.DBCALLAGENTOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDBCALLAGENTOperationCompleted);
            }
            this.InvokeAsync("DBCALLAGENT", new object[] {
                        SRVNAME,
                        DBNAME,
                        AGENT,
                        PARAMXML,
                        NOTEID}, this.DBCALLAGENTOperationCompleted, userState);
        }

        private void OnDBCALLAGENTOperationCompleted(object arg)
        {
            if((this.DBCALLAGENTCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DBCALLAGENTCompleted(this, new DBCALLAGENTCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("DBSESSIONKEEPALIVE", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Bare)]
        [return: System.Xml.Serialization.XmlElementAttribute("DBSESSIONKEEPALIVEReturn", Namespace = "urn:DefaultNamespace")]
        public string DBSESSIONKEEPALIVE()
        {
            object[] results = this.Invoke("DBSESSIONKEEPALIVE", new object[0]);
            return ((string)(results[0]));
        }

        /// <remarks/>
        public System.IAsyncResult BeginDBSESSIONKEEPALIVE(System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("DBSESSIONKEEPALIVE", new object[0], callback, asyncState);
        }

        /// <remarks/>
        public string EndDBSESSIONKEEPALIVE(System.IAsyncResult asyncResult)
        {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }

        /// <remarks/>
        public void DBSESSIONKEEPALIVEAsync()
        {
            this.DBSESSIONKEEPALIVEAsync(null);
        }

        /// <remarks/>
        public void DBSESSIONKEEPALIVEAsync(object userState)
        {
            if((this.DBSESSIONKEEPALIVEOperationCompleted == null))
            {
                this.DBSESSIONKEEPALIVEOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDBSESSIONKEEPALIVEOperationCompleted);
            }
            this.InvokeAsync("DBSESSIONKEEPALIVE", new object[0], this.DBSESSIONKEEPALIVEOperationCompleted, userState);
        }

        private void OnDBSESSIONKEEPALIVEOperationCompleted(object arg)
        {
            if((this.DBSESSIONKEEPALIVECompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DBSESSIONKEEPALIVECompleted(this, new DBSESSIONKEEPALIVECompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("DBUSERROLES", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Bare)]
        [return: System.Xml.Serialization.XmlArrayAttribute("DBUSERROLESReturn", Namespace = "urn:DefaultNamespace")]
        [return: System.Xml.Serialization.XmlArrayItemAttribute("item", Form = System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable = false)]
        public string[] DBUSERROLES([System.Xml.Serialization.XmlElementAttribute(Namespace = "urn:DefaultNamespace")] string SRVNAME, [System.Xml.Serialization.XmlElementAttribute(Namespace = "urn:DefaultNamespace")] string DBNAME)
        {
            object[] results = this.Invoke("DBUSERROLES", new object[] {
                        SRVNAME,
                        DBNAME});
            return ((string[])(results[0]));
        }

        /// <remarks/>
        public System.IAsyncResult BeginDBUSERROLES(string SRVNAME, string DBNAME, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("DBUSERROLES", new object[] {
                        SRVNAME,
                        DBNAME}, callback, asyncState);
        }

        /// <remarks/>
        public string[] EndDBUSERROLES(System.IAsyncResult asyncResult)
        {
            object[] results = this.EndInvoke(asyncResult);
            return ((string[])(results[0]));
        }

        /// <remarks/>
        public void DBUSERROLESAsync(string SRVNAME, string DBNAME)
        {
            this.DBUSERROLESAsync(SRVNAME, DBNAME, null);
        }

        /// <remarks/>
        public void DBUSERROLESAsync(string SRVNAME, string DBNAME, object userState)
        {
            if((this.DBUSERROLESOperationCompleted == null))
            {
                this.DBUSERROLESOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDBUSERROLESOperationCompleted);
            }
            this.InvokeAsync("DBUSERROLES", new object[] {
                        SRVNAME,
                        DBNAME}, this.DBUSERROLESOperationCompleted, userState);
        }

        private void OnDBUSERROLESOperationCompleted(object arg)
        {
            if((this.DBUSERROLESCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DBUSERROLESCompleted(this, new DBUSERROLESCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("DBACL", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Bare)]
        [return: System.Xml.Serialization.XmlElementAttribute("DBACLReturn", Namespace = "urn:DefaultNamespace")]
        public string DBACL([System.Xml.Serialization.XmlElementAttribute(Namespace = "urn:DefaultNamespace")] string SRVNAME, [System.Xml.Serialization.XmlElementAttribute(Namespace = "urn:DefaultNamespace")] string DBNAME)
        {
            object[] results = this.Invoke("DBACL", new object[] {
                        SRVNAME,
                        DBNAME});
            return ((string)(results[0]));
        }

        /// <remarks/>
        public System.IAsyncResult BeginDBACL(string SRVNAME, string DBNAME, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("DBACL", new object[] {
                        SRVNAME,
                        DBNAME}, callback, asyncState);
        }

        /// <remarks/>
        public string EndDBACL(System.IAsyncResult asyncResult)
        {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }

        /// <remarks/>
        public void DBACLAsync(string SRVNAME, string DBNAME)
        {
            this.DBACLAsync(SRVNAME, DBNAME, null);
        }

        /// <remarks/>
        public void DBACLAsync(string SRVNAME, string DBNAME, object userState)
        {
            if((this.DBACLOperationCompleted == null))
            {
                this.DBACLOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDBACLOperationCompleted);
            }
            this.InvokeAsync("DBACL", new object[] {
                        SRVNAME,
                        DBNAME}, this.DBACLOperationCompleted, userState);
        }

        private void OnDBACLOperationCompleted(object arg)
        {
            if((this.DBACLCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DBACLCompleted(this, new DBACLCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("DBEFFECTIVERIGHTS", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Bare)]
        [return: System.Xml.Serialization.XmlElementAttribute("DBEFFECTIVERIGHTSReturn", Namespace = "urn:DefaultNamespace")]
        public string DBEFFECTIVERIGHTS([System.Xml.Serialization.XmlElementAttribute(Namespace = "urn:DefaultNamespace")] string SRVNAME, [System.Xml.Serialization.XmlElementAttribute(Namespace = "urn:DefaultNamespace")] string DBNAME)
        {
            object[] results = this.Invoke("DBEFFECTIVERIGHTS", new object[] {
                        SRVNAME,
                        DBNAME});
            return ((string)(results[0]));
        }

        /// <remarks/>
        public System.IAsyncResult BeginDBEFFECTIVERIGHTS(string SRVNAME, string DBNAME, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("DBEFFECTIVERIGHTS", new object[] {
                        SRVNAME,
                        DBNAME}, callback, asyncState);
        }

        /// <remarks/>
        public string EndDBEFFECTIVERIGHTS(System.IAsyncResult asyncResult)
        {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }

        /// <remarks/>
        public void DBEFFECTIVERIGHTSAsync(string SRVNAME, string DBNAME)
        {
            this.DBEFFECTIVERIGHTSAsync(SRVNAME, DBNAME, null);
        }

        /// <remarks/>
        public void DBEFFECTIVERIGHTSAsync(string SRVNAME, string DBNAME, object userState)
        {
            if((this.DBEFFECTIVERIGHTSOperationCompleted == null))
            {
                this.DBEFFECTIVERIGHTSOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDBEFFECTIVERIGHTSOperationCompleted);
            }
            this.InvokeAsync("DBEFFECTIVERIGHTS", new object[] {
                        SRVNAME,
                        DBNAME}, this.DBEFFECTIVERIGHTSOperationCompleted, userState);
        }

        private void OnDBEFFECTIVERIGHTSOperationCompleted(object arg)
        {
            if((this.DBEFFECTIVERIGHTSCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DBEFFECTIVERIGHTSCompleted(this, new DBEFFECTIVERIGHTSCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("DBVIEW2XML", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Bare)]
        [return: System.Xml.Serialization.XmlElementAttribute("DBVIEW2XMLReturn", Namespace = "urn:DefaultNamespace")]
        public string DBVIEW2XML([System.Xml.Serialization.XmlElementAttribute(Namespace = "urn:DefaultNamespace")] string SRVNAME, [System.Xml.Serialization.XmlElementAttribute(Namespace = "urn:DefaultNamespace")] string DBNAME, [System.Xml.Serialization.XmlElementAttribute(Namespace = "urn:DefaultNamespace")] string VWNAM, [System.Xml.Serialization.XmlElementAttribute(Namespace = "urn:DefaultNamespace")] string CATTAGNAME, [System.Xml.Serialization.XmlElementAttribute(Namespace = "urn:DefaultNamespace")] string CATDEFAULT, [System.Xml.Serialization.XmlElementAttribute(Namespace = "urn:DefaultNamespace")] short DIRECT, [System.Xml.Serialization.XmlElementAttribute(Namespace = "urn:DefaultNamespace")] string STARTPOS, [System.Xml.Serialization.XmlElementAttribute(Namespace = "urn:DefaultNamespace")] short ROWS, [System.Xml.Serialization.XmlElementAttribute(Namespace = "urn:DefaultNamespace")] bool FRMTVAL, [System.Xml.Serialization.XmlElementAttribute(Namespace = "urn:DefaultNamespace")] bool SIMPLE, [System.Xml.Serialization.XmlElementAttribute(Namespace = "urn:DefaultNamespace")] bool RETJSON)
        {
            object[] results = this.Invoke("DBVIEW2XML", new object[] {
                        SRVNAME,
                        DBNAME,
                        VWNAM,
                        CATTAGNAME,
                        CATDEFAULT,
                        DIRECT,
                        STARTPOS,
                        ROWS,
                        FRMTVAL,
                        SIMPLE,
                        RETJSON});
            return ((string)(results[0]));
        }

        /// <remarks/>
        public System.IAsyncResult BeginDBVIEW2XML(string SRVNAME, string DBNAME, string VWNAM, string CATTAGNAME, string CATDEFAULT, short DIRECT, string STARTPOS, short ROWS, bool FRMTVAL, bool SIMPLE, bool RETJSON, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("DBVIEW2XML", new object[] {
                        SRVNAME,
                        DBNAME,
                        VWNAM,
                        CATTAGNAME,
                        CATDEFAULT,
                        DIRECT,
                        STARTPOS,
                        ROWS,
                        FRMTVAL,
                        SIMPLE,
                        RETJSON}, callback, asyncState);
        }

        /// <remarks/>
        public string EndDBVIEW2XML(System.IAsyncResult asyncResult)
        {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }

        /// <remarks/>
        public void DBVIEW2XMLAsync(string SRVNAME, string DBNAME, string VWNAM, string CATTAGNAME, string CATDEFAULT, short DIRECT, string STARTPOS, short ROWS, bool FRMTVAL, bool SIMPLE, bool RETJSON)
        {
            this.DBVIEW2XMLAsync(SRVNAME, DBNAME, VWNAM, CATTAGNAME, CATDEFAULT, DIRECT, STARTPOS, ROWS, FRMTVAL, SIMPLE, RETJSON, null);
        }

        /// <remarks/>
        public void DBVIEW2XMLAsync(string SRVNAME, string DBNAME, string VWNAM, string CATTAGNAME, string CATDEFAULT, short DIRECT, string STARTPOS, short ROWS, bool FRMTVAL, bool SIMPLE, bool RETJSON, object userState)
        {
            if((this.DBVIEW2XMLOperationCompleted == null))
            {
                this.DBVIEW2XMLOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDBVIEW2XMLOperationCompleted);
            }
            this.InvokeAsync("DBVIEW2XML", new object[] {
                        SRVNAME,
                        DBNAME,
                        VWNAM,
                        CATTAGNAME,
                        CATDEFAULT,
                        DIRECT,
                        STARTPOS,
                        ROWS,
                        FRMTVAL,
                        SIMPLE,
                        RETJSON}, this.DBVIEW2XMLOperationCompleted, userState);
        }

        private void OnDBVIEW2XMLOperationCompleted(object arg)
        {
            if((this.DBVIEW2XMLCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DBVIEW2XMLCompleted(this, new DBVIEW2XMLCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("DBVIEWCOLUMNS", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Bare)]
        [return: System.Xml.Serialization.XmlElementAttribute("DBVIEWCOLUMNSReturn", Namespace = "urn:DefaultNamespace")]
        public string DBVIEWCOLUMNS([System.Xml.Serialization.XmlElementAttribute(Namespace = "urn:DefaultNamespace")] string SRVNAME, [System.Xml.Serialization.XmlElementAttribute(Namespace = "urn:DefaultNamespace")] string DBNAME, [System.Xml.Serialization.XmlElementAttribute(Namespace = "urn:DefaultNamespace")] string VWNAM, [System.Xml.Serialization.XmlElementAttribute(Namespace = "urn:DefaultNamespace")] string CATTAGNAME, [System.Xml.Serialization.XmlElementAttribute(Namespace = "urn:DefaultNamespace")] bool CACHE, [System.Xml.Serialization.XmlElementAttribute(Namespace = "urn:DefaultNamespace")] bool RETJSON)
        {
            object[] results = this.Invoke("DBVIEWCOLUMNS", new object[] {
                        SRVNAME,
                        DBNAME,
                        VWNAM,
                        CATTAGNAME,
                        CACHE,
                        RETJSON});
            return ((string)(results[0]));
        }

        /// <remarks/>
        public System.IAsyncResult BeginDBVIEWCOLUMNS(string SRVNAME, string DBNAME, string VWNAM, string CATTAGNAME, bool CACHE, bool RETJSON, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("DBVIEWCOLUMNS", new object[] {
                        SRVNAME,
                        DBNAME,
                        VWNAM,
                        CATTAGNAME,
                        CACHE,
                        RETJSON}, callback, asyncState);
        }

        /// <remarks/>
        public string EndDBVIEWCOLUMNS(System.IAsyncResult asyncResult)
        {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }

        /// <remarks/>
        public void DBVIEWCOLUMNSAsync(string SRVNAME, string DBNAME, string VWNAM, string CATTAGNAME, bool CACHE, bool RETJSON)
        {
            this.DBVIEWCOLUMNSAsync(SRVNAME, DBNAME, VWNAM, CATTAGNAME, CACHE, RETJSON, null);
        }

        /// <remarks/>
        public void DBVIEWCOLUMNSAsync(string SRVNAME, string DBNAME, string VWNAM, string CATTAGNAME, bool CACHE, bool RETJSON, object userState)
        {
            if((this.DBVIEWCOLUMNSOperationCompleted == null))
            {
                this.DBVIEWCOLUMNSOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDBVIEWCOLUMNSOperationCompleted);
            }
            this.InvokeAsync("DBVIEWCOLUMNS", new object[] {
                        SRVNAME,
                        DBNAME,
                        VWNAM,
                        CATTAGNAME,
                        CACHE,
                        RETJSON}, this.DBVIEWCOLUMNSOperationCompleted, userState);
        }

        private void OnDBVIEWCOLUMNSOperationCompleted(object arg)
        {
            if((this.DBVIEWCOLUMNSCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DBVIEWCOLUMNSCompleted(this, new DBVIEWCOLUMNSCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("DBPUTINFOLDER", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Bare)]
        [return: System.Xml.Serialization.XmlElementAttribute("DBPUTINFOLDERReturn", Namespace = "urn:DefaultNamespace")]
        public string DBPUTINFOLDER([System.Xml.Serialization.XmlElementAttribute(Namespace = "urn:DefaultNamespace")] string SRVNAME, [System.Xml.Serialization.XmlElementAttribute(Namespace = "urn:DefaultNamespace")] string DBNAME, [System.Xml.Serialization.XmlElementAttribute(Namespace = "urn:DefaultNamespace")] string FOLDERNAME, [System.Xml.Serialization.XmlArrayAttribute(Namespace = "urn:DefaultNamespace")] [System.Xml.Serialization.XmlArrayItemAttribute("item", Form = System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable = false)] ref string[] DOCCOL, [System.Xml.Serialization.XmlElementAttribute(Namespace = "urn:DefaultNamespace")] bool CREATEONFAIL)
        {
            object[] results = this.Invoke("DBPUTINFOLDER", new object[] {
                        SRVNAME,
                        DBNAME,
                        FOLDERNAME,
                        DOCCOL,
                        CREATEONFAIL});
            DOCCOL = ((string[])(results[1]));
            return ((string)(results[0]));
        }

        /// <remarks/>
        public System.IAsyncResult BeginDBPUTINFOLDER(string SRVNAME, string DBNAME, string FOLDERNAME, string[] DOCCOL, bool CREATEONFAIL, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("DBPUTINFOLDER", new object[] {
                        SRVNAME,
                        DBNAME,
                        FOLDERNAME,
                        DOCCOL,
                        CREATEONFAIL}, callback, asyncState);
        }

        /// <remarks/>
        public string EndDBPUTINFOLDER(System.IAsyncResult asyncResult, out string[] DOCCOL)
        {
            object[] results = this.EndInvoke(asyncResult);
            DOCCOL = ((string[])(results[1]));
            return ((string)(results[0]));
        }

        /// <remarks/>
        public void DBPUTINFOLDERAsync(string SRVNAME, string DBNAME, string FOLDERNAME, string[] DOCCOL, bool CREATEONFAIL)
        {
            this.DBPUTINFOLDERAsync(SRVNAME, DBNAME, FOLDERNAME, DOCCOL, CREATEONFAIL, null);
        }

        /// <remarks/>
        public void DBPUTINFOLDERAsync(string SRVNAME, string DBNAME, string FOLDERNAME, string[] DOCCOL, bool CREATEONFAIL, object userState)
        {
            if((this.DBPUTINFOLDEROperationCompleted == null))
            {
                this.DBPUTINFOLDEROperationCompleted = new System.Threading.SendOrPostCallback(this.OnDBPUTINFOLDEROperationCompleted);
            }
            this.InvokeAsync("DBPUTINFOLDER", new object[] {
                        SRVNAME,
                        DBNAME,
                        FOLDERNAME,
                        DOCCOL,
                        CREATEONFAIL}, this.DBPUTINFOLDEROperationCompleted, userState);
        }

        private void OnDBPUTINFOLDEROperationCompleted(object arg)
        {
            if((this.DBPUTINFOLDERCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DBPUTINFOLDERCompleted(this, new DBPUTINFOLDERCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("DBREMOVEFROMFOLDER", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Bare)]
        [return: System.Xml.Serialization.XmlElementAttribute("DBREMOVEFROMFOLDERReturn", Namespace = "urn:DefaultNamespace")]
        public string DBREMOVEFROMFOLDER([System.Xml.Serialization.XmlElementAttribute(Namespace = "urn:DefaultNamespace")] string SRVNAME, [System.Xml.Serialization.XmlElementAttribute(Namespace = "urn:DefaultNamespace")] string DBNAME, [System.Xml.Serialization.XmlElementAttribute(Namespace = "urn:DefaultNamespace")] string FOLDERNAME, [System.Xml.Serialization.XmlArrayAttribute(Namespace = "urn:DefaultNamespace")] [System.Xml.Serialization.XmlArrayItemAttribute("item", Form = System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable = false)] ref string[] DOCCOL)
        {
            object[] results = this.Invoke("DBREMOVEFROMFOLDER", new object[] {
                        SRVNAME,
                        DBNAME,
                        FOLDERNAME,
                        DOCCOL});
            DOCCOL = ((string[])(results[1]));
            return ((string)(results[0]));
        }

        /// <remarks/>
        public System.IAsyncResult BeginDBREMOVEFROMFOLDER(string SRVNAME, string DBNAME, string FOLDERNAME, string[] DOCCOL, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("DBREMOVEFROMFOLDER", new object[] {
                        SRVNAME,
                        DBNAME,
                        FOLDERNAME,
                        DOCCOL}, callback, asyncState);
        }

        /// <remarks/>
        public string EndDBREMOVEFROMFOLDER(System.IAsyncResult asyncResult, out string[] DOCCOL)
        {
            object[] results = this.EndInvoke(asyncResult);
            DOCCOL = ((string[])(results[1]));
            return ((string)(results[0]));
        }

        /// <remarks/>
        public void DBREMOVEFROMFOLDERAsync(string SRVNAME, string DBNAME, string FOLDERNAME, string[] DOCCOL)
        {
            this.DBREMOVEFROMFOLDERAsync(SRVNAME, DBNAME, FOLDERNAME, DOCCOL, null);
        }

        /// <remarks/>
        public void DBREMOVEFROMFOLDERAsync(string SRVNAME, string DBNAME, string FOLDERNAME, string[] DOCCOL, object userState)
        {
            if((this.DBREMOVEFROMFOLDEROperationCompleted == null))
            {
                this.DBREMOVEFROMFOLDEROperationCompleted = new System.Threading.SendOrPostCallback(this.OnDBREMOVEFROMFOLDEROperationCompleted);
            }
            this.InvokeAsync("DBREMOVEFROMFOLDER", new object[] {
                        SRVNAME,
                        DBNAME,
                        FOLDERNAME,
                        DOCCOL}, this.DBREMOVEFROMFOLDEROperationCompleted, userState);
        }

        private void OnDBREMOVEFROMFOLDEROperationCompleted(object arg)
        {
            if((this.DBREMOVEFROMFOLDERCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DBREMOVEFROMFOLDERCompleted(this, new DBREMOVEFROMFOLDERCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("DBCLEARFOLDER", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Bare)]
        [return: System.Xml.Serialization.XmlElementAttribute("DBCLEARFOLDERReturn", Namespace = "urn:DefaultNamespace")]
        public string DBCLEARFOLDER([System.Xml.Serialization.XmlElementAttribute(Namespace = "urn:DefaultNamespace")] string SRVNAME, [System.Xml.Serialization.XmlElementAttribute(Namespace = "urn:DefaultNamespace")] string DBNAME, [System.Xml.Serialization.XmlElementAttribute(Namespace = "urn:DefaultNamespace")] string FOLDERNAME)
        {
            object[] results = this.Invoke("DBCLEARFOLDER", new object[] {
                        SRVNAME,
                        DBNAME,
                        FOLDERNAME});
            return ((string)(results[0]));
        }

        /// <remarks/>
        public System.IAsyncResult BeginDBCLEARFOLDER(string SRVNAME, string DBNAME, string FOLDERNAME, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("DBCLEARFOLDER", new object[] {
                        SRVNAME,
                        DBNAME,
                        FOLDERNAME}, callback, asyncState);
        }

        /// <remarks/>
        public string EndDBCLEARFOLDER(System.IAsyncResult asyncResult)
        {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }

        /// <remarks/>
        public void DBCLEARFOLDERAsync(string SRVNAME, string DBNAME, string FOLDERNAME)
        {
            this.DBCLEARFOLDERAsync(SRVNAME, DBNAME, FOLDERNAME, null);
        }

        /// <remarks/>
        public void DBCLEARFOLDERAsync(string SRVNAME, string DBNAME, string FOLDERNAME, object userState)
        {
            if((this.DBCLEARFOLDEROperationCompleted == null))
            {
                this.DBCLEARFOLDEROperationCompleted = new System.Threading.SendOrPostCallback(this.OnDBCLEARFOLDEROperationCompleted);
            }
            this.InvokeAsync("DBCLEARFOLDER", new object[] {
                        SRVNAME,
                        DBNAME,
                        FOLDERNAME}, this.DBCLEARFOLDEROperationCompleted, userState);
        }

        private void OnDBCLEARFOLDEROperationCompleted(object arg)
        {
            if((this.DBCLEARFOLDERCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DBCLEARFOLDERCompleted(this, new DBCLEARFOLDERCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("DBUPLOADFILE", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Bare)]
        [return: System.Xml.Serialization.XmlElementAttribute("DBUPLOADFILEReturn", Namespace = "urn:DefaultNamespace")]
        public string DBUPLOADFILE([System.Xml.Serialization.XmlElementAttribute(Namespace = "urn:DefaultNamespace")] string SRVNAME, [System.Xml.Serialization.XmlElementAttribute(Namespace = "urn:DefaultNamespace")] string DBNAME, [System.Xml.Serialization.XmlElementAttribute(Namespace = "urn:DefaultNamespace")] string NOTEID, [System.Xml.Serialization.XmlElementAttribute(Namespace = "urn:DefaultNamespace")] string RTFIELD, [System.Xml.Serialization.XmlElementAttribute(Namespace = "urn:DefaultNamespace")] string FILENAME, [System.Xml.Serialization.XmlElementAttribute(Namespace = "urn:DefaultNamespace")] bool REPLACEFILE, [System.Xml.Serialization.XmlElementAttribute(Namespace = "urn:DefaultNamespace")] bool USEIBMDECODE, [System.Xml.Serialization.XmlElementAttribute(Namespace = "urn:DefaultNamespace", DataType = "base64Binary")] byte[] BASE64FILE)
        {
            object[] results = this.Invoke("DBUPLOADFILE", new object[] {
                        SRVNAME,
                        DBNAME,
                        NOTEID,
                        RTFIELD,
                        FILENAME,
                        REPLACEFILE,
                        USEIBMDECODE,
                        BASE64FILE});
            return ((string)(results[0]));
        }

        /// <remarks/>
        public System.IAsyncResult BeginDBUPLOADFILE(string SRVNAME, string DBNAME, string NOTEID, string RTFIELD, string FILENAME, bool REPLACEFILE, bool USEIBMDECODE, byte[] BASE64FILE, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("DBUPLOADFILE", new object[] {
                        SRVNAME,
                        DBNAME,
                        NOTEID,
                        RTFIELD,
                        FILENAME,
                        REPLACEFILE,
                        USEIBMDECODE,
                        BASE64FILE}, callback, asyncState);
        }

        /// <remarks/>
        public string EndDBUPLOADFILE(System.IAsyncResult asyncResult)
        {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }

        /// <remarks/>
        public void DBUPLOADFILEAsync(string SRVNAME, string DBNAME, string NOTEID, string RTFIELD, string FILENAME, bool REPLACEFILE, bool USEIBMDECODE, byte[] BASE64FILE)
        {
            this.DBUPLOADFILEAsync(SRVNAME, DBNAME, NOTEID, RTFIELD, FILENAME, REPLACEFILE, USEIBMDECODE, BASE64FILE, null);
        }

        /// <remarks/>
        public void DBUPLOADFILEAsync(string SRVNAME, string DBNAME, string NOTEID, string RTFIELD, string FILENAME, bool REPLACEFILE, bool USEIBMDECODE, byte[] BASE64FILE, object userState)
        {
            if((this.DBUPLOADFILEOperationCompleted == null))
            {
                this.DBUPLOADFILEOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDBUPLOADFILEOperationCompleted);
            }
            this.InvokeAsync("DBUPLOADFILE", new object[] {
                        SRVNAME,
                        DBNAME,
                        NOTEID,
                        RTFIELD,
                        FILENAME,
                        REPLACEFILE,
                        USEIBMDECODE,
                        BASE64FILE}, this.DBUPLOADFILEOperationCompleted, userState);
        }

        private void OnDBUPLOADFILEOperationCompleted(object arg)
        {
            if((this.DBUPLOADFILECompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DBUPLOADFILECompleted(this, new DBUPLOADFILECompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("DBDOWNLOADFILE", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Bare)]
        [return: System.Xml.Serialization.XmlElementAttribute("DBDOWNLOADFILEReturn", Namespace = "urn:DefaultNamespace", DataType = "base64Binary")]
        public byte[] DBDOWNLOADFILE([System.Xml.Serialization.XmlElementAttribute(Namespace = "urn:DefaultNamespace")] string SRVNAME, [System.Xml.Serialization.XmlElementAttribute(Namespace = "urn:DefaultNamespace")] string DBNAME, [System.Xml.Serialization.XmlElementAttribute(Namespace = "urn:DefaultNamespace")] string NOTEID, [System.Xml.Serialization.XmlElementAttribute(Namespace = "urn:DefaultNamespace")] string RTFIELD, [System.Xml.Serialization.XmlElementAttribute(Namespace = "urn:DefaultNamespace")] string FILENAME, [System.Xml.Serialization.XmlElementAttribute(Namespace = "urn:DefaultNamespace")] bool USEIBMENCODE)
        {
            object[] results = this.Invoke("DBDOWNLOADFILE", new object[] {
                        SRVNAME,
                        DBNAME,
                        NOTEID,
                        RTFIELD,
                        FILENAME,
                        USEIBMENCODE});
            return ((byte[])(results[0]));
        }

        /// <remarks/>
        public System.IAsyncResult BeginDBDOWNLOADFILE(string SRVNAME, string DBNAME, string NOTEID, string RTFIELD, string FILENAME, bool USEIBMENCODE, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("DBDOWNLOADFILE", new object[] {
                        SRVNAME,
                        DBNAME,
                        NOTEID,
                        RTFIELD,
                        FILENAME,
                        USEIBMENCODE}, callback, asyncState);
        }

        /// <remarks/>
        public byte[] EndDBDOWNLOADFILE(System.IAsyncResult asyncResult)
        {
            object[] results = this.EndInvoke(asyncResult);
            return ((byte[])(results[0]));
        }

        /// <remarks/>
        public void DBDOWNLOADFILEAsync(string SRVNAME, string DBNAME, string NOTEID, string RTFIELD, string FILENAME, bool USEIBMENCODE)
        {
            this.DBDOWNLOADFILEAsync(SRVNAME, DBNAME, NOTEID, RTFIELD, FILENAME, USEIBMENCODE, null);
        }

        /// <remarks/>
        public void DBDOWNLOADFILEAsync(string SRVNAME, string DBNAME, string NOTEID, string RTFIELD, string FILENAME, bool USEIBMENCODE, object userState)
        {
            if((this.DBDOWNLOADFILEOperationCompleted == null))
            {
                this.DBDOWNLOADFILEOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDBDOWNLOADFILEOperationCompleted);
            }
            this.InvokeAsync("DBDOWNLOADFILE", new object[] {
                        SRVNAME,
                        DBNAME,
                        NOTEID,
                        RTFIELD,
                        FILENAME,
                        USEIBMENCODE}, this.DBDOWNLOADFILEOperationCompleted, userState);
        }

        private void OnDBDOWNLOADFILEOperationCompleted(object arg)
        {
            if((this.DBDOWNLOADFILECompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DBDOWNLOADFILECompleted(this, new DBDOWNLOADFILECompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("DBDOCATTACHMENTLIST", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Bare)]
        [return: System.Xml.Serialization.XmlElementAttribute("DBDOCATTACHMENTLISTReturn", Namespace = "urn:DefaultNamespace")]
        public string DBDOCATTACHMENTLIST([System.Xml.Serialization.XmlElementAttribute(Namespace = "urn:DefaultNamespace")] string SRVNAME, [System.Xml.Serialization.XmlElementAttribute(Namespace = "urn:DefaultNamespace")] string DBNAME, [System.Xml.Serialization.XmlElementAttribute(Namespace = "urn:DefaultNamespace")] string NOTEID, [System.Xml.Serialization.XmlElementAttribute(Namespace = "urn:DefaultNamespace")] string RTFIELD)
        {
            object[] results = this.Invoke("DBDOCATTACHMENTLIST", new object[] {
                        SRVNAME,
                        DBNAME,
                        NOTEID,
                        RTFIELD});
            return ((string)(results[0]));
        }

        /// <remarks/>
        public System.IAsyncResult BeginDBDOCATTACHMENTLIST(string SRVNAME, string DBNAME, string NOTEID, string RTFIELD, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("DBDOCATTACHMENTLIST", new object[] {
                        SRVNAME,
                        DBNAME,
                        NOTEID,
                        RTFIELD}, callback, asyncState);
        }

        /// <remarks/>
        public string EndDBDOCATTACHMENTLIST(System.IAsyncResult asyncResult)
        {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }

        /// <remarks/>
        public void DBDOCATTACHMENTLISTAsync(string SRVNAME, string DBNAME, string NOTEID, string RTFIELD)
        {
            this.DBDOCATTACHMENTLISTAsync(SRVNAME, DBNAME, NOTEID, RTFIELD, null);
        }

        /// <remarks/>
        public void DBDOCATTACHMENTLISTAsync(string SRVNAME, string DBNAME, string NOTEID, string RTFIELD, object userState)
        {
            if((this.DBDOCATTACHMENTLISTOperationCompleted == null))
            {
                this.DBDOCATTACHMENTLISTOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDBDOCATTACHMENTLISTOperationCompleted);
            }
            this.InvokeAsync("DBDOCATTACHMENTLIST", new object[] {
                        SRVNAME,
                        DBNAME,
                        NOTEID,
                        RTFIELD}, this.DBDOCATTACHMENTLISTOperationCompleted, userState);
        }

        private void OnDBDOCATTACHMENTLISTOperationCompleted(object arg)
        {
            if((this.DBDOCATTACHMENTLISTCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DBDOCATTACHMENTLISTCompleted(this, new DBDOCATTACHMENTLISTCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        public new void CancelAsync(object userState)
        {
            base.CancelAsync(userState);
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.18020")]
    public delegate void DBCOLUMNCompletedEventHandler(object sender, DBCOLUMNCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.18020")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class DBCOLUMNCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal DBCOLUMNCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
            base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public string[] Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((string[])(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.18020")]
    public delegate void DBCOLUMNXCompletedEventHandler(object sender, DBCOLUMNXCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.18020")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class DBCOLUMNXCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal DBCOLUMNXCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
            base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public string[] Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((string[])(this.results[0]));
            }
        }

        /// <remarks/>
        public string[] COLFIELDS
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((string[])(this.results[1]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.18020")]
    public delegate void DBROWXCompletedEventHandler(object sender, DBROWXCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.18020")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class DBROWXCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal DBROWXCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
            base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public string[] Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((string[])(this.results[0]));
            }
        }

        /// <remarks/>
        public string[] COLFIELDS
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((string[])(this.results[1]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.18020")]
    public delegate void DBLOOKUPCompletedEventHandler(object sender, DBLOOKUPCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.18020")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class DBLOOKUPCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal DBLOOKUPCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
            base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public string[] Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((string[])(this.results[0]));
            }
        }

        /// <remarks/>
        public string[] KEYS
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((string[])(this.results[1]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.18020")]
    public delegate void DBLOOKUPXCompletedEventHandler(object sender, DBLOOKUPXCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.18020")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class DBLOOKUPXCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal DBLOOKUPXCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
            base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public string[] Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((string[])(this.results[0]));
            }
        }

        /// <remarks/>
        public string[] KEYS
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((string[])(this.results[1]));
            }
        }

        /// <remarks/>
        public string[] COLFIELDS
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((string[])(this.results[2]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.18020")]
    public delegate void DBGETFORMFIELDSCompletedEventHandler(object sender, DBGETFORMFIELDSCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.18020")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class DBGETFORMFIELDSCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal DBGETFORMFIELDSCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
            base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public string[] Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((string[])(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.18020")]
    public delegate void DBGETFIELDTYPESCompletedEventHandler(object sender, DBGETFIELDTYPESCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.18020")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class DBGETFIELDTYPESCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal DBGETFIELDTYPESCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
            base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public string[] Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((string[])(this.results[0]));
            }
        }

        /// <remarks/>
        public string[] FIELDS
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((string[])(this.results[1]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.18020")]
    public delegate void DBREADDOCFIELDSCompletedEventHandler(object sender, DBREADDOCFIELDSCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.18020")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class DBREADDOCFIELDSCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal DBREADDOCFIELDSCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
            base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public string[] Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((string[])(this.results[0]));
            }
        }

        /// <remarks/>
        public string[] FIELDS
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((string[])(this.results[1]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.18020")]
    public delegate void DBREADPROFILEFIELDSCompletedEventHandler(object sender, DBREADPROFILEFIELDSCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.18020")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class DBREADPROFILEFIELDSCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal DBREADPROFILEFIELDSCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
            base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public string[] Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((string[])(this.results[0]));
            }
        }

        /// <remarks/>
        public string[] FIELDS
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((string[])(this.results[1]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.18020")]
    public delegate void DBSAVEDOCFIELDSCompletedEventHandler(object sender, DBSAVEDOCFIELDSCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.18020")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class DBSAVEDOCFIELDSCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal DBSAVEDOCFIELDSCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
            base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public string Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }

        /// <remarks/>
        public string[] FIELDS
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((string[])(this.results[1]));
            }
        }

        /// <remarks/>
        public string[] TYPES
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((string[])(this.results[2]));
            }
        }

        /// <remarks/>
        public string[] VALUES
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((string[])(this.results[3]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.18020")]
    public delegate void DBSAVEPROFILEFIELDSCompletedEventHandler(object sender, DBSAVEPROFILEFIELDSCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.18020")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class DBSAVEPROFILEFIELDSCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal DBSAVEPROFILEFIELDSCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
            base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public string Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }

        /// <remarks/>
        public string[] FIELDS
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((string[])(this.results[1]));
            }
        }

        /// <remarks/>
        public string[] TYPES
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((string[])(this.results[2]));
            }
        }

        /// <remarks/>
        public string[] VALUES
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((string[])(this.results[3]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.18020")]
    public delegate void DBRENDERDOCCompletedEventHandler(object sender, DBRENDERDOCCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.18020")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class DBRENDERDOCCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal DBRENDERDOCCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
            base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public string Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.18020")]
    public delegate void DBDELETEDOCCompletedEventHandler(object sender, DBDELETEDOCCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.18020")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class DBDELETEDOCCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal DBDELETEDOCCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
            base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public string Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.18020")]
    public delegate void DBGETMAILINFOCompletedEventHandler(object sender, DBGETMAILINFOCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.18020")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class DBGETMAILINFOCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal DBGETMAILINFOCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
            base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public string[] Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((string[])(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.18020")]
    public delegate void DBLOOKUPNAMESCompletedEventHandler(object sender, DBLOOKUPNAMESCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.18020")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class DBLOOKUPNAMESCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal DBLOOKUPNAMESCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
            base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public string[] Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((string[])(this.results[0]));
            }
        }

        /// <remarks/>
        public string[] SEARCHSTR
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((string[])(this.results[1]));
            }
        }

        /// <remarks/>
        public string[] ITEMS
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((string[])(this.results[2]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.18020")]
    public delegate void DBLOOKUPALLNAMESCompletedEventHandler(object sender, DBLOOKUPALLNAMESCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.18020")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class DBLOOKUPALLNAMESCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal DBLOOKUPALLNAMESCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
            base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public string[] Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((string[])(this.results[0]));
            }
        }

        /// <remarks/>
        public string[] ITEMS
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((string[])(this.results[1]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.18020")]
    public delegate void DBSENDDOCUMENTCompletedEventHandler(object sender, DBSENDDOCUMENTCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.18020")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class DBSENDDOCUMENTCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal DBSENDDOCUMENTCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
            base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public string Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }

        /// <remarks/>
        public string[] RECIPIENTS
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((string[])(this.results[1]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.18020")]
    public delegate void DBVIEWSCompletedEventHandler(object sender, DBVIEWSCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.18020")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class DBVIEWSCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal DBVIEWSCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
            base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public string Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.18020")]
    public delegate void DBOUTLINEVIEWSCompletedEventHandler(object sender, DBOUTLINEVIEWSCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.18020")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class DBOUTLINEVIEWSCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal DBOUTLINEVIEWSCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
            base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public string Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.18020")]
    public delegate void DBSEARCHCompletedEventHandler(object sender, DBSEARCHCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.18020")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class DBSEARCHCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal DBSEARCHCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
            base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public string[] Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((string[])(this.results[0]));
            }
        }

        /// <remarks/>
        public string[] COLFIELDS
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((string[])(this.results[1]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.18020")]
    public delegate void DBFTSEARCHCompletedEventHandler(object sender, DBFTSEARCHCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.18020")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class DBFTSEARCHCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal DBFTSEARCHCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
            base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public string[] Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((string[])(this.results[0]));
            }
        }

        /// <remarks/>
        public string[] COLFIELDS
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((string[])(this.results[1]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.18020")]
    public delegate void DBVIEWFTSEARCHCompletedEventHandler(object sender, DBVIEWFTSEARCHCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.18020")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class DBVIEWFTSEARCHCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal DBVIEWFTSEARCHCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
            base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public string[] Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((string[])(this.results[0]));
            }
        }

        /// <remarks/>
        public string[] COLFIELDS
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((string[])(this.results[1]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.18020")]
    public delegate void DBCALLAGENTCompletedEventHandler(object sender, DBCALLAGENTCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.18020")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class DBCALLAGENTCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal DBCALLAGENTCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
            base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public string Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.18020")]
    public delegate void DBSESSIONKEEPALIVECompletedEventHandler(object sender, DBSESSIONKEEPALIVECompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.18020")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class DBSESSIONKEEPALIVECompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal DBSESSIONKEEPALIVECompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
            base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public string Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.18020")]
    public delegate void DBUSERROLESCompletedEventHandler(object sender, DBUSERROLESCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.18020")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class DBUSERROLESCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal DBUSERROLESCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
            base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public string[] Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((string[])(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.18020")]
    public delegate void DBACLCompletedEventHandler(object sender, DBACLCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.18020")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class DBACLCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal DBACLCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
            base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public string Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.18020")]
    public delegate void DBEFFECTIVERIGHTSCompletedEventHandler(object sender, DBEFFECTIVERIGHTSCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.18020")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class DBEFFECTIVERIGHTSCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal DBEFFECTIVERIGHTSCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
            base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public string Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.18020")]
    public delegate void DBVIEW2XMLCompletedEventHandler(object sender, DBVIEW2XMLCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.18020")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class DBVIEW2XMLCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal DBVIEW2XMLCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
            base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public string Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.18020")]
    public delegate void DBVIEWCOLUMNSCompletedEventHandler(object sender, DBVIEWCOLUMNSCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.18020")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class DBVIEWCOLUMNSCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal DBVIEWCOLUMNSCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
            base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public string Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.18020")]
    public delegate void DBPUTINFOLDERCompletedEventHandler(object sender, DBPUTINFOLDERCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.18020")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class DBPUTINFOLDERCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal DBPUTINFOLDERCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
            base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public string Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }

        /// <remarks/>
        public string[] DOCCOL
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((string[])(this.results[1]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.18020")]
    public delegate void DBREMOVEFROMFOLDERCompletedEventHandler(object sender, DBREMOVEFROMFOLDERCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.18020")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class DBREMOVEFROMFOLDERCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal DBREMOVEFROMFOLDERCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
            base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public string Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }

        /// <remarks/>
        public string[] DOCCOL
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((string[])(this.results[1]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.18020")]
    public delegate void DBCLEARFOLDERCompletedEventHandler(object sender, DBCLEARFOLDERCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.18020")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class DBCLEARFOLDERCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal DBCLEARFOLDERCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
            base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public string Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.18020")]
    public delegate void DBUPLOADFILECompletedEventHandler(object sender, DBUPLOADFILECompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.18020")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class DBUPLOADFILECompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal DBUPLOADFILECompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
            base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public string Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.18020")]
    public delegate void DBDOWNLOADFILECompletedEventHandler(object sender, DBDOWNLOADFILECompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.18020")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class DBDOWNLOADFILECompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal DBDOWNLOADFILECompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
            base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public byte[] Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((byte[])(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.18020")]
    public delegate void DBDOCATTACHMENTLISTCompletedEventHandler(object sender, DBDOCATTACHMENTLISTCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.18020")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class DBDOCATTACHMENTLISTCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal DBDOCATTACHMENTLISTCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
            base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public string Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
}
